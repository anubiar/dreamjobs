[{"D:\\DreamJobs\\client\\src\\App.tsx":"1","D:\\DreamJobs\\client\\src\\screens\\profile\\ProfileScreen.tsx":"2","D:\\DreamJobs\\client\\src\\config\\Colors.ts":"3","D:\\DreamJobs\\client\\src\\components\\navBar\\menupopper.tsx":"4","D:\\DreamJobs\\client\\src\\services\\api.ts":"5","D:\\DreamJobs\\client\\src\\screens\\profile\\EditProfile.tsx":"6","D:\\DreamJobs\\client\\src\\screens\\main\\Main.tsx":"7","D:\\DreamJobs\\client\\src\\components\\vacantPosition\\positionItem.tsx":"8","D:\\DreamJobs\\client\\src\\components\\vacantPosition\\positionItemList.tsx":"9","D:\\DreamJobs\\client\\src\\screens\\auth\\AuthScreen.tsx":"10","D:\\DreamJobs\\client\\src\\redux\\actions\\authActions.ts":"11","D:\\DreamJobs\\client\\src\\redux\\reducers\\profileEmployerReducers.ts":"12","D:\\DreamJobs\\client\\src\\config\\config.ts":"13","D:\\DreamJobs\\client\\src\\screens\\profile\\EditExperience.tsx":"14","D:\\DreamJobs\\client\\src\\components\\navBar\\NavBar.tsx":"15","D:\\DreamJobs\\client\\src\\components\\profile\\createEmployerProfile.tsx":"16","D:\\DreamJobs\\client\\src\\navigation\\Navigation.tsx":"17","D:\\DreamJobs\\client\\src\\redux\\actions\\profileEmployerActions.ts":"18","D:\\DreamJobs\\client\\src\\screens\\auth\\RegisterScreen.tsx":"19","D:\\DreamJobs\\client\\src\\index.tsx":"20","D:\\DreamJobs\\client\\src\\screens\\pageNotFound\\PageNotFound.tsx":"21","D:\\DreamJobs\\client\\src\\components\\footer\\Footer.tsx":"22","D:\\DreamJobs\\client\\src\\redux\\reducers\\index.ts":"23","D:\\DreamJobs\\client\\src\\redux\\reducers\\profileEmployeeReducers.ts":"24","D:\\DreamJobs\\client\\src\\redux\\reducers\\authReducers.ts":"25","D:\\DreamJobs\\client\\src\\functions\\createFormData.ts":"26","D:\\DreamJobs\\client\\src\\redux\\reducers\\generalReducers.ts":"27","D:\\DreamJobs\\client\\src\\redux\\actions\\generalActions.ts":"28","D:\\DreamJobs\\client\\src\\redux\\actions\\profileEmployeeActions.ts":"29","D:\\DreamJobs\\client\\src\\redux\\reducers\\positionReducer.ts":"30","D:\\DreamJobs\\client\\src\\reportWebVitals.ts":"31","D:\\DreamJobs\\client\\src\\redux\\actions\\positionActions.ts":"32","D:\\DreamJobs\\client\\src\\components\\vacantPosition\\positionItemCreate.tsx":"33"},{"size":555,"mtime":1609868747728,"results":"34","hashOfConfig":"35"},{"size":2891,"mtime":1610789165998,"results":"36","hashOfConfig":"35"},{"size":87,"mtime":1610015479261,"results":"37","hashOfConfig":"35"},{"size":4685,"mtime":1611066542038,"results":"38","hashOfConfig":"35"},{"size":2260,"mtime":1609851287185,"results":"39","hashOfConfig":"35"},{"size":8851,"mtime":1610789296306,"results":"40","hashOfConfig":"35"},{"size":2259,"mtime":1611063880406,"results":"41","hashOfConfig":"35"},{"size":1925,"mtime":1610792499809,"results":"42","hashOfConfig":"35"},{"size":721,"mtime":1610397577911,"results":"43","hashOfConfig":"35"},{"size":7471,"mtime":1610108464699,"results":"44","hashOfConfig":"35"},{"size":2454,"mtime":1610893057727,"results":"45","hashOfConfig":"35"},{"size":2229,"mtime":1610995908226,"results":"46","hashOfConfig":"35"},{"size":185,"mtime":1609851269566,"results":"47","hashOfConfig":"35"},{"size":3949,"mtime":1610789262704,"results":"48","hashOfConfig":"35"},{"size":6375,"mtime":1611069236056,"results":"49","hashOfConfig":"35"},{"size":8564,"mtime":1611064769191,"results":"50","hashOfConfig":"35"},{"size":4920,"mtime":1611071569222,"results":"51","hashOfConfig":"35"},{"size":3126,"mtime":1610995729260,"results":"52","hashOfConfig":"35"},{"size":8621,"mtime":1610893122190,"results":"53","hashOfConfig":"35"},{"size":502,"mtime":1609870314968,"results":"54","hashOfConfig":"35"},{"size":148,"mtime":1609868534512,"results":"55","hashOfConfig":"35"},{"size":884,"mtime":1610366505276,"results":"56","hashOfConfig":"35"},{"size":1034,"mtime":1610659541486,"results":"57","hashOfConfig":"35"},{"size":2163,"mtime":1610787873051,"results":"58","hashOfConfig":"35"},{"size":1627,"mtime":1610980032734,"results":"59","hashOfConfig":"35"},{"size":1205,"mtime":1610966159822,"results":"60","hashOfConfig":"35"},{"size":2181,"mtime":1610921743109,"results":"61","hashOfConfig":"35"},{"size":4183,"mtime":1610920135051,"results":"62","hashOfConfig":"35"},{"size":2386,"mtime":1610460581859,"results":"63","hashOfConfig":"35"},{"size":1477,"mtime":1610463721465,"results":"64","hashOfConfig":"35"},{"size":425,"mtime":1606144486115,"results":"65","hashOfConfig":"35"},{"size":2292,"mtime":1610134310736,"results":"66","hashOfConfig":"35"},{"size":5518,"mtime":1611069028792,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"1cxvwcq",{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"77"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"77"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"77"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"77"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"74"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":1,"source":"107","usedDeprecatedRules":"77"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"74"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"74"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"77"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"74"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"77"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\DreamJobs\\client\\src\\App.tsx",[],["151","152"],"D:\\DreamJobs\\client\\src\\screens\\profile\\ProfileScreen.tsx",["153","154","155"],"import React, { useEffect, useState } from \"react\";\r\nimport EditProfile from \"./EditProfile\";\r\nimport  EditExperience  from \"./EditExperience\";\r\nimport { makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { onGetEmployeeProfileData } from \"../../redux/actions/profileEmployeeActions\";\r\nimport PositionItem from \"../../components/vacantPosition/positionItem\";\r\n\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  index: any;\r\n  value: any;\r\n}\r\n\r\nfunction TabPanel(props: TabPanelProps) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`vertical-tabpanel-${index}`}\r\n      aria-labelledby={`vertical-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && \r\n        \r\n          children\r\n        \r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction a11yProps(index: any) {\r\n  return {\r\n    id: `vertical-tab-${index}`,\r\n    \"aria-controls\": `vertical-tabpanel-${index}`,\r\n  };\r\n}\r\nconst ProfileScreen = () => {\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n  const [value, setValue] = useState(0);\r\n\r\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(onGetEmployeeProfileData())\r\n},[])\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Tabs\r\n        orientation=\"vertical\"\r\n        variant=\"fullWidth\"\r\n        value={value}\r\n        onChange={handleChange}\r\n        aria-label=\"Profile Components\"\r\n        className={classes.tabs}\r\n      >\r\n        <Tab label=\"General information\" {...a11yProps(0)}/>\r\n        <Tab label=\"Experience\" {...a11yProps(1)}/>\r\n        <Tab label=\"Education\" {...a11yProps(2)}/>\r\n        <Tab label=\"Languages\" {...a11yProps(3)}/>\r\n        <Tab label=\"Skills\" {...a11yProps(4)}/>\r\n      </Tabs>\r\n\r\n      <TabPanel value={value} index={0}>\r\n        <EditProfile />\r\n      </TabPanel>\r\n      <TabPanel value={value} index={1}>\r\n        <EditExperience />\r\n      </TabPanel>\r\n      <TabPanel value={value} index={2}>\r\n        <PositionItem/>\r\n      </TabPanel>\r\n      <TabPanel value={value} index={3}>\r\n        Edit Languages\r\n      </TabPanel>\r\n      <TabPanel value={value} index={4}>\r\n        Edit Skiils\r\n      </TabPanel>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.paper,\r\n    display: \"flex\",\r\n    width: undefined,\r\n    height: undefined,\r\n    marginTop:100,\r\n  },\r\n  tabs: {\r\n    borderRight: `1px solid ${theme.palette.divider}`,\r\n  },\r\n}));\r\n\r\nexport default ProfileScreen;\r\n",["156","157"],"D:\\DreamJobs\\client\\src\\config\\Colors.ts",[],["158","159"],"D:\\DreamJobs\\client\\src\\components\\navBar\\menupopper.tsx",[],"D:\\DreamJobs\\client\\src\\services\\api.ts",["160"],"import axios from 'axios'\r\nimport Config from \"../config/config\";\r\nimport {store} from \"../redux/store\";\r\n\r\n\r\nconst apiClient = axios.create({\r\n    baseURL : Config.apiUrl,\r\n    headers: {\r\n        Accept : \"application/json\",\r\n        \"Content-Type\" : \"application/json\",\r\n    }\r\n})\r\n\r\napiClient.interceptors.request.use(\r\n    config => {\r\n        const authReducer : any = store.getState().authReducer;\r\n        const {token} = authReducer;\r\n        if(token) {\r\n            config.headers['Authorization'] = `Bearer ${token}`\r\n        }\r\n        return config;\r\n    },\r\n    error => {\r\n        Promise.reject(error);\r\n    }\r\n)\r\n\r\napiClient.interceptors.request.use(\r\n    response => successHandler(response),\r\n    err => errorHandler(err)\r\n)\r\n\r\nexport default {\r\n    get(path:string,params:any) {\r\n        return apiClient.get(`/${path}`,params)\r\n            .then(response=>response.data);\r\n    },\r\n    getWithBody(path:string,body:any){\r\n        return apiClient.get(`/${path}`,{params : body})\r\n            .then(response=>response.data)\r\n    },\r\n    post(path:string,body : any) {\r\n        return apiClient.post(`/${path}`,body,{\r\n            headers: {\r\n                \"Content-Type\" : \"application/json\",\r\n            }\r\n        })\r\n    },\r\n    postFormData(path:string,body:any){\r\n        return apiClient.post(`/${path}`,body,{\r\n            headers : {\r\n                'Content-Type' : 'multipart/form-data',\r\n                \"X-Requested-With\": \"XMLHttpRequest\"\r\n            }\r\n        })\r\n    },\r\n    put(path:string,body:any){\r\n        return apiClient.put(`/${path}`,body);\r\n    },\r\n    delete(path:string){\r\n        return apiClient.delete(`/${path}`);\r\n    },\r\n    deleteWithBody(path:string,body:any){\r\n        return apiClient.delete(`/${path}`,{\r\n            headers: {\r\n                'Content-Type' : 'multipart/form-data',\r\n                \"X-Requested-With\": \"XMLHttpRequest\"\r\n            },\r\n            data: {\r\n                productId : body\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nconst errorHandler = (err: any) => {\r\n    // if (err.response && err.response.status === 401) store.dispatch('authentication/logout');\r\n    return Promise.reject(err);\r\n};\r\n\r\nconst successHandler = (response: any) => {\r\n    return response;\r\n};\r\n","D:\\DreamJobs\\client\\src\\screens\\profile\\EditProfile.tsx",["161"],"import React,{useEffect, useRef} from 'react';\r\nimport * as yup from 'yup';\r\nimport { Formik } from 'formik';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\nimport { Button, Container, CssBaseline, Grid, makeStyles, TextField, Typography } from '@material-ui/core';\r\nimport { ApplicationState } from '../../redux/reducers';\r\nimport { onGetEmployeeProfileData, onUpdateProfile } from '../../redux/actions/profileEmployeeActions';\r\n\r\n//@ts-ignore\r\nimport { Bounce } from 'react-activity';\r\nimport { DropzoneArea } from 'material-ui-dropzone';\r\n\r\n\r\nconst validationSchema = yup.object().shape({\r\n    lastName: yup.string()\r\n        .label('lastName')\r\n        .required('Please enter last name ')\r\n        .min(3, 'Last Name must be at least 3 characters')\r\n        .max(20,'Last Name must be at most 20 characters'),\r\n    birthDate: yup.date()\r\n        .label('bithDate')\r\n        .required('Please enter your birth date '),\r\n    adress: yup.string()\r\n        .label('adresss')\r\n        .required('Please enter adress ')\r\n        .min(3, 'adress must be at least 3 characters')\r\n        .max(20,'adress must be at most 20 characters'),\r\n    phone: yup.string()\r\n        .label('phone')\r\n        .required('Please enter your phone')\r\n        .min(7,'Phone number must be at least 7 digits')\r\n        .max(20,'Phone number must be at most 20 digits'),\r\n    name: yup.string()\r\n        .label('userName')\r\n        .required('Please enter your Name')\r\n        .min(3,'Name must be at least 3 characters')\r\n        .max(20,'Name must be at most 20 characters'),\r\n    imagePath : yup.array()\r\n        .label('imagePath')\r\n        .max(1,'No more than 1 image'),\r\n})\r\n\r\n\r\n\r\n\r\nconst EditProfile = () => {\r\n    const dispatch = useDispatch();\r\n    const classes = useStyles();\r\n    const navigation = useHistory();\r\n    const formikRef = useRef<any>(null);\r\n\r\n    useEffect(() => {\r\n        dispatch(onGetEmployeeProfileData())\r\n    },[])  \r\n    const {name,email,phone,lastName,birthDate,gender,adress,inProgress,imagePath} = useSelector((state:ApplicationState) => state.profileEmployeeReducers);\r\n    \r\n    const initialFormValue = {\r\n        name,\r\n        phone,\r\n        email,\r\n        lastName,\r\n        gender,\r\n        birthDate,\r\n        adress,\r\n        imagePath\r\n    }\r\n\r\n    const onUpdateInfo = async (values : any) => {\r\n        await dispatch(onUpdateProfile(values));\r\n        navigation.replace('/profile')\r\n    }\r\n    return(\r\n        <Container component=\"div\" maxWidth=\"lg\">\r\n            <Formik innerRef={formikRef}\r\n            initialValues = {initialFormValue}\r\n            validationSchema = {validationSchema}\r\n            onSubmit = {(values) => onUpdateInfo(values)}\r\n            \r\n            >\r\n                {\r\n                    ({values,touched,errors,handleChange,handleBlur,handleSubmit}) => (\r\n\r\n                        <>\r\n                        <CssBaseline/>\r\n                        <div className={classes.paper}>\r\n                            <Typography component='h1' variant='h5'>\r\n                                Edit Profile\r\n                            </Typography>\r\n                            <form className={classes.form} onSubmit={handleSubmit}>\r\n                                <Grid xs={3} sm={4} md={6} lg={12}>\r\n                                    <Grid item xs>\r\n                                    <TextField\r\n                                    variant=\"outlined\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    id=\"name\"\r\n                                    label=\"Your Name\"\r\n                                    name=\"name\"\r\n                                    autoFocus\r\n                                    value={values.name}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    helperText={(errors.name && touched.name) && errors.name}\r\n                                    FormHelperTextProps={{\r\n                                        className : classes.helperText\r\n                                    }}\r\n                                    contentEditable = {false}\r\n                                />\r\n                                    </Grid>\r\n                                <Grid item xs> \r\n                                    <TextField\r\n                                    variant=\"outlined\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    id=\"phone\"\r\n                                    type=\"number\"\r\n                                    label=\"Your phone number\"\r\n                                    name=\"phone\"\r\n                                    autoFocus\r\n                                    value={values.phone}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    helperText={(errors.phone && touched.phone) && errors.phone}\r\n                                    FormHelperTextProps={{\r\n                                        className : classes.helperText\r\n                                    }}\r\n                                /></Grid>\r\n                               \r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    id=\"lastName\"\r\n                                    label=\"Your Last Name\"\r\n                                    name=\"lastName\"\r\n                                    autoFocus\r\n                                    value={values.lastName}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    helperText={(errors.lastName && touched.lastName) && errors.lastName}\r\n                                    FormHelperTextProps={{\r\n                                        className : classes.helperText\r\n                                    }}\r\n                                />\r\n                                <DropzoneArea\r\n                                    acceptedFiles={['image/*']}\r\n                                    filesLimit={1}\r\n                                    dropzoneText={\"Drag and drop your new thumbnail here or click\"}\r\n                                    onChange={(image) => formikRef?.current?.setFieldValue('imagePath',image)}\r\n                                />\r\n                                {(errors.imagePath&&touched.imagePath) && errors.imagePath ?\r\n                                    <p className={classes.helperText} style={{paddingLeft:15,fontSize:12,marginBottom:-15}}>\r\n                                        {(errors.imagePath&&touched.imagePath) && errors.imagePath}\r\n                                    </p>\r\n                                    : null}\r\n                                <Button\r\n                                    type='submit'\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    className={classes.submit}\r\n                                >\r\n                                    <div style={{minHeight:25}}>\r\n                                        {inProgress ?\r\n                                            <div style={{paddingTop:10}}>\r\n                                                <Bounce />\r\n                                            </div>\r\n                                            :\r\n                                            'Edit Profile'\r\n                                        }\r\n                                    </div>\r\n                                </Button>\r\n                                </Grid>\r\n                                \r\n                            </form>\r\n                        </div>\r\n                    </>\r\n                    )\r\n                }\r\n            </Formik>\r\n        </Container>\r\n    )\r\n}\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    helperText : {\r\n        color : '#a20606'\r\n    },\r\n}));\r\n\r\nexport default EditProfile;\r\n","D:\\DreamJobs\\client\\src\\screens\\main\\Main.tsx",["162","163","164","165","166","167","168","169"],"import React, {useEffect} from \"react\";\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {ApplicationState} from \"../../redux/reducers\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport { onGetPositionsMain } from \"../../redux/actions/positionActions\";\r\nimport { Color } from \"../../config/Colors\";\r\nimport PositionItem from \"../../components/vacantPosition/positionItem\";\r\nimport EditProfile from \"../profile/EditProfile\";\r\nimport { Container, Grid } from \"@material-ui/core\";\r\nimport PositionItemList from \"../../components/vacantPosition/positionItemList\";\r\nimport { onExistEmployerProfile, onGetEmployerImageProfile, onGetEmployerProfileData } from \"../../redux/actions/profileEmployerActions\";\r\nimport { onExistEmployeeProfile } from \"../../redux/actions/profileEmployeeActions\";\r\nimport Config from \"../../config/config\";\r\n\r\n\r\nconst Main = () => {\r\n    const dispatch = useDispatch();\r\n    const classes = useStyles();\r\n\r\n    const {PositionsMain,inProgressPositionsMain} = useSelector((state:ApplicationState) => state.positionReducer);\r\n\r\n    useEffect( () => { \r\n       (async () => {dispatch(onGetPositionsMain());\r\n        dispatch(onExistEmployerProfile());\r\n        dispatch(onExistEmployeeProfile());\r\n        await dispatch(onGetEmployerProfileData());\r\n    })()\r\n        \r\n    },[])\r\n\r\n    return (\r\n        <div>\r\n            {inProgressPositionsMain ?\r\n                <div className={classes.center}>\r\n                    <Loader type={'Puff'} color={Color.secondaryColor}/>\r\n                </div>\r\n                :\r\n                <div>\r\n                    <main>\r\n                        <PositionItemList positionItems={PositionsMain}/>                    \r\n                    </main>\r\n\r\n                   \r\n                    \r\n                   \r\n                    \r\n                    \r\n                </div>\r\n                \r\n\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    center: {\r\n        position: 'absolute',\r\n        left: '50%',\r\n        top: '50%',\r\n        transform: 'translate(-50%, -50%)'\r\n    },\r\n}));\r\n\r\nexport default Main;\r\n",["170","171"],"D:\\DreamJobs\\client\\src\\components\\vacantPosition\\positionItem.tsx",["172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187"],"import React,{useState} from 'react';\r\n\r\nimport {Card,CardContent,CardActions,CardMedia,Collapse,Grid,IconButton,Link,Typography, Paper, CardActionArea} from '@material-ui/core';\r\nimport clsx from 'clsx';\r\nimport {makeStyles, useTheme} from \"@material-ui/core/styles\";\r\nimport Config from \"../../config/config\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {ApplicationState} from \"../../redux/reducers\";\r\nimport {Color} from \"../../config/Colors\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport {useHistory} from \"react-router\";\r\n\r\n\r\nconst PositionItem = ({card: {positionName,salary,country}} : any) =>{\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const navigation = useHistory();\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n      <div>\r\n          <Grid item>\r\n            <Card className={classes.root}>\r\n                <CardActionArea>\r\n                    <CardMedia className={classes.media} image=\"https://images.unsplash.com/photo-1610559145677-d4a640a1a6c9?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1950&q=80s\" />\r\n                    <CardContent className={classes.content}>\r\n                    <Typography gutterBottom variant=\"h6\" component=\"p\">\r\n                        Position:{positionName}\r\n                    </Typography>\r\n                    <Typography>Salary:{salary}</Typography>\r\n                    <Typography>Country:{country}</Typography>\r\n\r\n                    </CardContent>\r\n                \r\n                </CardActionArea>\r\n            </Card> \r\n\r\n        </Grid>\r\n      </div>\r\n        \r\n        \r\n    );\r\n}\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%'\r\n    },\r\n    content: {\r\n        maxWidth: 455\r\n    },\r\n    media: {\r\n        height: 200\r\n    }\r\n}));\r\n\r\n\r\nexport default PositionItem;","D:\\DreamJobs\\client\\src\\components\\vacantPosition\\positionItemList.tsx",["188","189"],"import { Container, Grid, makeStyles } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport PositionItem from './positionItem';\r\n\r\n\r\n\r\nconst PositionItemList = ({positionItems} : any) => {\r\nconst dispatch = useDispatch();\r\nconst classes = useStyles();\r\n\r\n\r\n\r\n    return (\r\n        <Container maxWidth=\"md\" style={{marginTop: 100}}>\r\n            <Grid container spacing={4} justify=\"space-around\">\r\n                {\r\n                    positionItems.map((card : any) => <PositionItem card={card}/>)\r\n                }\r\n            </Grid>\r\n        </Container>\r\n    )\r\n}\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n}))\r\n\r\nexport default PositionItemList;\r\n\r\n","D:\\DreamJobs\\client\\src\\screens\\auth\\AuthScreen.tsx",["190"],"import React, {useRef, useState} from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\n// @ts-ignore\r\nimport { Bounce } from 'react-activity';\r\nimport 'react-activity/dist/react-activity.css';\r\nimport * as yup from 'yup'\r\nimport {Formik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {onLogin} from \"../../redux/actions/authActions\";\r\nimport {ApplicationState} from \"../../redux/reducers\";\r\n\r\nconst initFormValue = {\r\n    email: '',\r\n    password: '',\r\n}\r\nconst validationSchema = yup.object().shape({\r\n    email: yup.string()\r\n        .label('email')\r\n        .email('Enter a valid email')\r\n        .required('Please enter an email'),\r\n    password: yup.string()\r\n        .label('Password')\r\n        .required('Please enter your password')\r\n        .min(4, 'Password must have at least 4 characters '),\r\n});\r\n\r\n\r\nconst AuthScreen = () =>{\r\n    const dispatch = useDispatch();\r\n    const classes = useStyles();\r\n    const {inProgress,error} = useSelector((state: ApplicationState) => state.authReducer);\r\n    const formikRef = useRef(null);\r\n\r\n\r\n    const onSignIn= (values : any) => {\r\n        dispatch(onLogin(values))\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <Formik\r\n                innerRef={formikRef}\r\n                validationSchema={validationSchema}\r\n                initialValues={initFormValue}\r\n                onSubmit={(values) => onSignIn(values)}\r\n            >\r\n                {({\r\n                      values,\r\n                      touched,\r\n                      errors,\r\n                      handleChange,\r\n                      handleBlur,\r\n                      handleSubmit\r\n                  }) => (\r\n                    <>\r\n                        <CssBaseline />\r\n                        <div className={classes.paper}>\r\n                            <Avatar className={classes.avatar}>\r\n                                <LockOutlinedIcon />\r\n                            </Avatar>\r\n                            <Typography component=\"h1\" variant=\"h5\">\r\n                                Sign in\r\n                            </Typography>\r\n                            <form className={classes.form} onSubmit={handleSubmit}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    id=\"email\"\r\n                                    label=\"Email Address\"\r\n                                    name=\"email\"\r\n                                    autoComplete=\"email\"\r\n                                    autoFocus\r\n                                    value={values.email}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    helperText={(errors.email && touched.email) && errors.email}\r\n                                    FormHelperTextProps={{\r\n                                        className : classes.helperText\r\n                                    }}\r\n                                />\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    name=\"password\"\r\n                                    label=\"Password\"\r\n                                    type=\"password\"\r\n                                    id=\"password\"\r\n                                    autoComplete=\"current-password\"\r\n                                    value={values.password}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    helperText={(errors.password&&touched.password) && errors.password}\r\n                                    FormHelperTextProps={{\r\n                                        className : classes.helperText\r\n                                    }}\r\n                                />\r\n                                <FormControlLabel\r\n                                    control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n                                    label=\"Remember me\"\r\n                                />\r\n                                <Button\r\n                                    type='submit'\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    className={classes.submit}\r\n                                >\r\n                                     <div style={{minHeight:25}}>\r\n                                         {inProgress ?\r\n                                            <Bounce style={{marginTop:25}}/>\r\n                                         :\r\n                                         'Sign in'\r\n                                         }\r\n                                     </div>\r\n                                </Button>\r\n                                {error ?\r\n                                <p className={classes.helperText} style={{paddingLeft:15,fontSize:12,marginTop:-5}}>{error}</p>\r\n                                :null}\r\n                                <Grid container>\r\n                                    <Grid item xs>\r\n                                        <Link href=\"#\" variant=\"body2\">\r\n                                            Forgot password?\r\n                                        </Link>\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <Link href=\"/signUp\" variant=\"body2\">\r\n                                            {\"Don't have an account? Sign Up\"}\r\n                                        </Link>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </form>\r\n                        </div>\r\n                        <Box mt={8}/>\r\n                    </>\r\n                )}\r\n            </Formik>\r\n        </Container>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    helperText : {\r\n        color : '#a20606'\r\n    },\r\n}));\r\n\r\nexport default AuthScreen\r\n","D:\\DreamJobs\\client\\src\\redux\\actions\\authActions.ts",[],"D:\\DreamJobs\\client\\src\\redux\\reducers\\profileEmployerReducers.ts",[],"D:\\DreamJobs\\client\\src\\config\\config.ts",[],"D:\\DreamJobs\\client\\src\\screens\\profile\\EditExperience.tsx",["191","192","193","194","195","196","197","198"],"import React,{useRef} from 'react';\r\nimport * as yup from 'yup';\r\n\r\nimport { Formik } from 'formik';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\nimport { Button, Container, CssBaseline, Grid, makeStyles, Paper, TextField, Typography } from '@material-ui/core';\r\nimport { ApplicationState } from '../../redux/reducers';\r\nimport { onUpdateProfile } from '../../redux/actions/profileEmployeeActions';\r\n\r\n\r\n//@ts-ignore\r\nimport { Bounce } from 'react-activity';\r\n\r\nconst validationSchema = yup.object().shape({\r\n    lastPost : yup.string().\r\n    label(\"lastPost\")\r\n    .required(\"Please enter your last post\")\r\n    .min(5,\"Post name must be at least 3 characters\")\r\n    .max(20,\"Post name must be max 20 charachters lentgh\"),\r\n    companyName: yup.string().label(\"companyName\").required(\"Enter name of company you worked\")\r\n    .min(3,\"Company name must be at least 3 characters length\")\r\n    .max(20,\"Company name must be maximum 20 characters length\"),\r\n    companyAdress:yup.string().label(\"companyAdress\").required(\"Enter adress of company you worked\")\r\n    .min(3,\"Company adress must be at least 3 characters length\")\r\n    .max(20,\"Company adress must be maximum 20 characters length\"),\r\n\r\n})\r\n\r\n\r\nconst EditExperience = () => {\r\n    const dispatch = useDispatch();\r\n    const classes = useStyles();\r\n    const navigation = useHistory();\r\n    const formikRef = useRef(null);\r\n\r\n    const {experience} = useSelector((state : ApplicationState) => state.profileEmployeeReducers);\r\n\r\n    const onUpdateInfo = async (values : any) => {\r\n        await dispatch(onUpdateProfile(values));\r\n        navigation.replace('/profile')\r\n    }\r\n\r\n    const initialValues = {\r\n        experience\r\n    }\r\n\r\n    return(\r\n        // <Container component=\"main\" maxWidth={'lg'}>\r\n        <div>\r\n            <Formik initialValues={initialValues} onSubmit= {(values) => onUpdateInfo(values)} innerRef={formikRef} validationSchema={validationSchema}>\r\n                {\r\n                    ({values,touched,handleBlur,handleChange,handleSubmit,errors}) => (\r\n                        <form>\r\n                                        <TextField variant=\"outlined\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    id=\"name\"\r\n                                    label=\"Your Name\"\r\n                                    name=\"name\"\r\n                                    autoFocus\r\n                                    value={values.experience.companyName}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    helperText={(errors.experience && touched.experience) && errors.experience}\r\n                                    FormHelperTextProps={{\r\n                                        className : classes.helperText\r\n                                    }} />\r\n                                </form>\r\n                    )\r\n                            \r\n                                \r\n                                \r\n                                \r\n                               \r\n                            \r\n                \r\n                }\r\n                \r\n            </Formik>\r\n        </div>\r\n            \r\n        // </Container>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    helperText : {\r\n        color : '#a20606'\r\n    },\r\n}));\r\nexport default EditExperience;","D:\\DreamJobs\\client\\src\\components\\navBar\\NavBar.tsx",["199","200","201","202","203","204"],"import React, { useEffect } from \"react\";\r\nimport { fade, makeStyles } from \"@material-ui/core/styles\";\r\nimport { AccountCircle, Add, Home, Search } from \"@material-ui/icons\";\r\nimport {\r\n  AppBar,\r\n  IconButton,\r\n  InputBase,\r\n  Link,\r\n  Toolbar,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router\";\r\nimport { ApplicationState } from \"../../redux/reducers\";\r\nimport MenuListComposition from \"./menupopper\";\r\nimport { onExistEmployeeProfile } from \"../../redux/actions/profileEmployeeActions\";\r\nimport { onExistEmployerProfile } from \"../../redux/actions/profileEmployerActions\";\r\n\r\nenum routerEnum {\r\n  main = \"/\",\r\n  jobProfile = \"/createJobProfile\",\r\n  hireProfile = \"/createHireProfile\",\r\n}\r\n\r\nconst NavBar = () => {\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n  const location = useLocation();\r\n  const { pathname } = location;\r\n  const navigation = useHistory();\r\n  \r\n  const { existEmployeeProfile } = useSelector(\r\n    (state: ApplicationState) => state.profileEmployeeReducers\r\n  );\r\n  const { existEmployerProfile } = useSelector(\r\n    (state: ApplicationState) => state.profileEmployerReducers\r\n  );\r\n\r\n  \r\n\r\n  const keyPress = (e: any) => {\r\n    if (e.keyCode == 13) navigation.replace(\"/products\");\r\n  };\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position={\"fixed\"} style={{ backgroundColor: \"#bbbfbc\" }}>\r\n        <Toolbar>\r\n          <Typography className={classes.title} variant=\"h6\" noWrap>\r\n            <Link href={\"/\"} style={{ color: \"black\" }}>\r\n              Dream Jobs\r\n            </Link>\r\n          </Typography>\r\n\r\n          <div className={classes.search}>\r\n            <div className={classes.searchIcon}>\r\n              <Search />\r\n            </div>\r\n            <InputBase\r\n              placeholder=\"Search…\"\r\n              classes={{\r\n                root: classes.inputRoot,\r\n                input: classes.inputInput,\r\n              }}\r\n              inputProps={{ \"aria-label\": \"search\" }}\r\n              // onChange={(e) => onChange(e.target.value)}\r\n              onKeyDown={keyPress}\r\n              // value={search}\r\n            />\r\n          </div>\r\n\r\n          <Link href={\"/\"}>\r\n            <IconButton>\r\n              <Home\r\n                className={\r\n                  pathname === routerEnum.main\r\n                    ? classes.selectedNavIcon\r\n                    : undefined\r\n                }\r\n              />\r\n            </IconButton>\r\n          </Link>\r\n            {/* {\r\n                !existEmployerProfile && <Link href={\"/createHireProfile\"}>\r\n                <IconButton>\r\n                  <AccountCircle\r\n                    className={\r\n                      pathname.includes(routerEnum.hireProfile)\r\n                        ? classes.selectedNavIcon\r\n                        : undefined\r\n                    }\r\n                  />\r\n                </IconButton>\r\n              </Link>\r\n            }\r\n             \r\n            {\r\n                !existEmployeeProfile && <Link href={\"/createJobProfile\"}>\r\n                <IconButton>\r\n                  <AccountCircle\r\n                    className={\r\n                      pathname.includes(routerEnum.jobProfile)\r\n                        ? classes.selectedNavIcon\r\n                        : undefined\r\n                    }\r\n                  />\r\n                </IconButton>\r\n              </Link>\r\n            } */}\r\n\r\n            {\r\n              !existEmployerProfile\r\n              ?\r\n              (\r\n                !existEmployeeProfile\r\n                ?\r\n                <Link href={\"/createHireProfile\"}>\r\n                <IconButton>\r\n                  <AccountCircle\r\n                    className={\r\n                      pathname.includes(routerEnum.hireProfile)\r\n                        ? classes.selectedNavIcon\r\n                        : undefined\r\n                    }\r\n                  />\r\n                </IconButton>\r\n                </Link>\r\n                :\r\n                null\r\n              )\r\n              :\r\n              null\r\n                \r\n              \r\n            }\r\n\r\n            {\r\n              !existEmployeeProfile\r\n              ?\r\n              (\r\n                !existEmployerProfile\r\n                ?\r\n                <Link href={\"/createJobProfile\"}>\r\n                <IconButton>\r\n                  <AccountCircle\r\n                    className={\r\n                      pathname.includes(routerEnum.jobProfile)\r\n                        ? classes.selectedNavIcon\r\n                        : undefined\r\n                    }\r\n                  />\r\n                </IconButton>\r\n                </Link>\r\n                :\r\n                null\r\n              )\r\n              :\r\n              null\r\n            }\r\n        \r\n          \r\n        \r\n           \r\n        \r\n          \r\n\r\n            <MenuListComposition />\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    display: \"none\",\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      display: \"block\",\r\n    },\r\n    color: \"black\",\r\n  },\r\n  search: {\r\n    position: \"relative\",\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: fade(theme.palette.common.white, 0.15),\r\n    \"&:hover\": {\r\n      backgroundColor: fade(theme.palette.common.white, 0.25),\r\n    },\r\n    width: \"100%\",\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      marginLeft: theme.spacing(1),\r\n      width: \"auto\",\r\n    },\r\n    color: \"black\",\r\n  },\r\n  searchIcon: {\r\n    padding: theme.spacing(0, 2),\r\n    height: \"100%\",\r\n    position: \"absolute\",\r\n    pointerEvents: \"none\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  inputRoot: {\r\n    color: \"inherit\",\r\n  },\r\n  inputInput: {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n    transition: theme.transitions.create(\"width\"),\r\n    width: \"100%\",\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: \"12ch\",\r\n      \"&:focus\": {\r\n        width: \"20ch\",\r\n      },\r\n    },\r\n  },\r\n  selectedNavIcon: {\r\n    color: \"#a50101\",\r\n  },\r\n}));\r\n\r\nexport default NavBar;\r\n","D:\\DreamJobs\\client\\src\\components\\profile\\createEmployerProfile.tsx",["205","206"],"import React, { useEffect, useRef } from 'react';\r\nimport * as yup from \"yup\";\r\nimport {Formik} from 'formik';\r\nimport { Button, Container, InputAdornment, makeStyles, MenuItem, TextField } from '@material-ui/core';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { onUpdateEmployerProfile } from '../../redux/actions/profileEmployerActions';\r\nimport { useHistory } from 'react-router';\r\n//@ts-ignore\r\nimport { Bounce } from 'react-activity';\r\nimport { ApplicationState } from '../../redux/reducers';\r\nimport { DropzoneArea } from 'material-ui-dropzone';\r\nimport { onGetAllCompanyTypes } from '../../redux/actions/generalActions';\r\nimport Loader from 'react-loader-spinner';\r\n\r\nconst initialValues = {\r\n        companyName : '',\r\n        companyAdress : '',\r\n        companyNumber : '',\r\n        fiscalCode : '',\r\n        companyRepresentant: '',\r\n        typeId : '',\r\n        imagePath: []\r\n}\r\nconst validationSchema = yup.object().shape({\r\n    companyName: yup.string()\r\n    .label(\"companyName\")\r\n    .required(\"Please give the name of your company\")\r\n    .min(5,\"Company name must be at least 5\")\r\n    .max(50,\"Company name must be maximum 50 characters\"),\r\n    companyAdress: yup.string()\r\n    .label(\"companyAdress\")\r\n    .required(\"Adress of company not provided\")\r\n    .min(5,\"Min 5 characters\")\r\n    .max(50,\"Max 50 characters\"),\r\n    companyNumber: yup.string()\r\n    .label(\"companyNumber\")\r\n    .required(\"Provide a phone number\")\r\n    .trim()\r\n    .matches(/^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\s\\./0-9]*$/,\"Number should be of format +(123)-456-67-89\"),\r\n    fiscalCode : yup.string()\r\n    .label(\"fiscalCode\")\r\n    .min(13,\"Must be 13 characters\")\r\n    .max(13,\"13 character\"),\r\n    companyRepresentant: yup.string()\r\n    .label(\"companyRepresentant\"),\r\n    typeId: yup.string()\r\n    .label(\"typeId\")\r\n    .required(\"Please select company type\"),\r\n    imagePath : yup.array()\r\n        .label('imagePath')\r\n        .max(1,'No more than 1 image'),\r\n    \r\n});\r\nconst CreateEmployerProfile = () => {\r\n    const formikRef = useRef<any>(null);\r\n    const dispatch = useDispatch();\r\n    const classes = useStyles();\r\n    const navigation = useHistory();\r\n    const onCreateEmployerProfile = async (values : any) => {\r\n        console.log(values);\r\n        await dispatch(onUpdateEmployerProfile(values));\r\n        console.log(values);\r\n        navigation.replace(\"/\");\r\n    } \r\n   \r\n    const {inProgress} = useSelector((state : ApplicationState) => state.profileEmployerReducers);\r\n    const {isLoadingCompanyTypes,companyTypes} = useSelector((state : ApplicationState) => state.generalReducers);\r\n\r\n    useEffect(() => {\r\n        dispatch(onGetAllCompanyTypes());\r\n    },[])\r\n\r\n    return(\r\n        <div>\r\n            <Container className={classes.root} maxWidth={'md'}>\r\n                <Formik initialValues={initialValues} innerRef={formikRef} validationSchema={validationSchema} onSubmit={(values) => onCreateEmployerProfile(values)}>\r\n                {\r\n                    ({errors,values,touched,handleBlur,handleChange,handleSubmit}) => (\r\n                        <form onSubmit={handleSubmit}>\r\n                            <DropzoneArea\r\n                                    acceptedFiles={['image/*']}\r\n                                    filesLimit={1}\r\n                                    dropzoneText={\"Drag and drop an image here or click\"}\r\n                                    onChange={(image) => formikRef?.current?.setFieldValue('imagePath',image)}\r\n                                />\r\n                                {(errors.imagePath&&touched.imagePath) && errors.imagePath ?\r\n                                <p className={classes.helperText} style={{paddingLeft:15,fontSize:12,marginBottom:-15}}>\r\n                                    {(errors.imagePath&&touched.imagePath) && errors.imagePath}\r\n                                </p>\r\n                                : null}\r\n                            <TextField value={values.companyName} variant=\"outlined\" margin=\"normal\" fullWidth name=\"companyName\" id=\"companyName\" label=\"Company Name\" autoFocus onChange={handleChange} onBlur={handleBlur} helperText={(errors.companyName && touched.companyName) && errors.companyName}/>\r\n                            <TextField value={values.companyRepresentant} variant=\"outlined\" margin=\"normal\" fullWidth name=\"companyRepresentant\" id=\"companyRepresentant\" label=\"Company Representant\"  onChange={handleChange} onBlur={handleBlur}/>\r\n                            <TextField value={values.companyAdress} variant=\"outlined\" margin=\"normal\" fullWidth name=\"companyAdress\" id=\"companyAdress\" label=\"Company Adress\"  onChange={handleChange} onBlur={handleBlur} helperText={(errors.companyAdress && touched.companyAdress) && errors.companyAdress}/>\r\n                            <TextField value={values.companyNumber} variant=\"outlined\" margin=\"normal\" fullWidth name=\"companyNumber\" id=\"companyNumber\" label=\"Company Phone Number\"  onChange={handleChange} onBlur={handleBlur} helperText={(errors.companyNumber && touched.companyNumber) && errors.companyNumber}/>\r\n                            <TextField value={values.fiscalCode} variant=\"outlined\" margin=\"normal\" fullWidth name=\"fiscalCode\" id=\"fiscalCode\" label=\"Company Tax Number\"  onChange={handleChange} onBlur={handleBlur} helperText={(errors.fiscalCode && touched.fiscalCode) && errors.fiscalCode}/>\r\n                            <TextField\r\n                                    variant=\"outlined\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    name=\"typeId\"\r\n                                    label=\"Type\"\r\n                                    select\r\n                                    id=\"typeId\"\r\n                                    InputLabelProps={{\r\n                                        shrink: !isLoadingCompanyTypes,\r\n                                    }}\r\n                                    InputProps={{\r\n                                        readOnly: isLoadingCompanyTypes,\r\n                                        startAdornment: isLoadingCompanyTypes ? (\r\n                                            <InputAdornment position=\"start\">\r\n                                                <Loader height={15} width={15} type={\"Circles\"} color={'#a50101'}/>\r\n                                            </InputAdornment>\r\n                                        ) : null,\r\n                                    }}\r\n                                    value={values.typeId}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    helperText={(errors.typeId&&touched.typeId) && errors.typeId}\r\n                                    FormHelperTextProps={{\r\n                                        className : classes.helperText\r\n                                    }}\r\n                                >\r\n                                    {companyTypes.map((option) => (\r\n                                        <MenuItem key={option.companyTypeId} value={option.companyTypeId}>\r\n                                            {option.typeName}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </TextField>\r\n                                \r\n                            <Button type='submit' fullWidth variant=\"contained\">\r\n                                <div style={{minHeight:25}}>\r\n                                    {\r\n                                        inProgress\r\n                                        ?\r\n                                        <div style={{paddingTop:10}}>\r\n                                            <Bounce/>\r\n                                        </div>\r\n                                        \r\n                                        :\r\n                                        \"Submit\"\r\n                                    }\r\n                                    \r\n                                </div>\r\n                               \r\n                            </Button>\r\n                        </form>\r\n                    )\r\n                }\r\n                </Formik>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root:{\r\n        marginTop: 100,\r\n        marginBottom: 100,\r\n        \r\n    },\r\n    helperText : {\r\n        color : '#a20606'\r\n    }\r\n}));\r\n\r\nexport default CreateEmployerProfile;\r\n","D:\\DreamJobs\\client\\src\\navigation\\Navigation.tsx",["207"],"D:\\DreamJobs\\client\\src\\redux\\actions\\profileEmployerActions.ts",["208","209"],"import {Dispatch} from \"react\";\r\nimport { createUpdateEmployerProfileFormData } from \"../../functions/createFormData\";\r\nimport ApiService from '../../services/api'\r\n\r\n\r\nexport interface getEmployerProfileData{\r\n    readonly type : 'GET_EMPLOYER_PROFILE_DATA',\r\n    payload : any\r\n}\r\n\r\n\r\nexport interface setEmployerProfileInProgress{\r\n    readonly type : 'SET_EMPLOYER_PROFILE_IN_PROGRESS',\r\n    payload: boolean\r\n}\r\n\r\nexport interface setExistEmployerProfile{\r\n    readonly type: 'SET_EXIST_EMPLOYER_PROFILE',\r\n    payload: boolean\r\n}\r\n\r\nexport interface setLoadingProfileImage{\r\n    readonly type: 'SET_LOADING_PROFILE_IMAGE',\r\n    payload: boolean\r\n}\r\n\r\nexport interface getEmployerProfileImage{\r\n    readonly type: \"GET_EMPLOYER_PROFILE_IMAGE\",\r\n    payload: any\r\n}\r\n\r\n\r\nexport type EmployerProfileActions =\r\n    |getEmployerProfileData\r\n    |setEmployerProfileInProgress\r\n    |setExistEmployerProfile\r\n    |setLoadingProfileImage\r\n    |getEmployerProfileImage\r\n\r\n\r\n\r\nexport const onGetEmployerProfileData = () =>{\r\n    return async (dispatch : Dispatch<EmployerProfileActions>) => {\r\n        try {\r\n            dispatch({type: 'SET_EMPLOYER_PROFILE_IN_PROGRESS',payload:true});\r\n            const response = await ApiService.get('profile/employer',{});\r\n            setTimeout(() => dispatch({type: 'GET_EMPLOYER_PROFILE_DATA',payload:response}),1500);\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n        finally{\r\n           setTimeout(() => dispatch({type:'SET_EMPLOYER_PROFILE_IN_PROGRESS',payload: false}),1500) ;\r\n        }\r\n    }\r\n}\r\n\r\nexport const onExistEmployerProfile = () => {\r\n    return async (dispatch : Dispatch<EmployerProfileActions>) => {\r\n        try {\r\n            const response = await ApiService.get('profile/exist',{});\r\n            setTimeout(() => dispatch({type: 'SET_EXIST_EMPLOYER_PROFILE',payload: response.employer}));\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n}\r\n\r\nexport const onUpdateEmployerProfile = (values : any) => {\r\n    return async (dispatch : Dispatch<EmployerProfileActions>) => {\r\n        try {\r\n            dispatch({type:\"SET_EMPLOYER_PROFILE_IN_PROGRESS\",payload: true});\r\n            const formData = createUpdateEmployerProfileFormData(values);\r\n            console.log(values);\r\n            console.log(formData);\r\n            const response = await ApiService.postFormData(\"profile/employer\",formData);\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n        finally{\r\n            setTimeout(() => dispatch({type:\"SET_EMPLOYER_PROFILE_IN_PROGRESS\",payload:false}),1500);\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const onGetEmployerImageProfile = (imagePath : any) => {\r\n    return async(dispatch : Dispatch<EmployerProfileActions>) => {\r\n        try {\r\n            dispatch({type:\"SET_LOADING_PROFILE_IMAGE\",payload:true});\r\n            const response = await ApiService.get(`profile/image/${imagePath}`,{});\r\n\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n        finally{\r\n            setTimeout(() => dispatch({type: \"SET_LOADING_PROFILE_IMAGE\",payload: false}),1500);\r\n        }\r\n    }\r\n}","D:\\DreamJobs\\client\\src\\screens\\auth\\RegisterScreen.tsx",["210"],"import React, {useRef} from \"react\";\r\nimport * as yup from \"yup\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {ApplicationState} from \"../../redux/reducers\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport {Formik} from \"formik\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Box from \"@material-ui/core/Box\";\r\n// @ts-ignore\r\nimport { Bounce } from 'react-activity';\r\nimport {onRegister} from \"../../redux/actions/authActions\";\r\nimport { useHistory } from \"react-router\";\r\n\r\n\r\n\r\nconst initFormValue = {\r\n    email: '',\r\n    password: '',\r\n    username: ''\r\n}\r\nconst validationSchema = yup.object().shape({\r\n    email: yup.string()\r\n        .label('Email')\r\n        .email('Enter a valid email')\r\n        .required('Please enter an email'),\r\n    password: yup.string()\r\n        .label('Password')\r\n        .required('Please enter your password')\r\n        .min(4, 'Password must have at least 4 characters '),\r\n    username: yup.string()\r\n    .required(\"User name required\")\r\n    .min(3,\"min 3 characters\")\r\n});\r\n\r\nconst RegisterScreen = () => {\r\n    const dispatch = useDispatch();\r\n    const classes = useStyles();\r\n    const {inProgress,errorRegister} = useSelector((state: ApplicationState) => state.authReducer);\r\n    const formikRef = useRef(null);\r\n    const navigation = useHistory();\r\n\r\n    const onSignUp= (values : any) => {\r\n        dispatch(onRegister(values));\r\n    }\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <Formik\r\n                innerRef={formikRef}\r\n                validationSchema={validationSchema}\r\n                initialValues={initFormValue}\r\n                onSubmit={(values) => onSignUp(values)}\r\n            >\r\n                {({\r\n                    values,\r\n                    touched,\r\n                    errors,\r\n                    handleChange,\r\n                    handleBlur,\r\n                    handleSubmit\r\n                  }) => (\r\n                    <>\r\n                        <CssBaseline />\r\n                        <div className={classes.paper}>\r\n                            <Avatar className={classes.avatar}>\r\n                                <LockOutlinedIcon />\r\n                            </Avatar>\r\n                            <Typography component=\"h1\" variant=\"h5\">\r\n                                Sign Up\r\n                            </Typography>\r\n                            <form className={classes.form} onSubmit={handleSubmit}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    id=\"email\"\r\n                                    label=\"Email Address\"\r\n                                    name=\"email\"\r\n                                    autoComplete=\"username\"\r\n                                    autoFocus\r\n                                    value={values.email}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    helperText={(errors.email && touched.email) && errors.email}\r\n                                    FormHelperTextProps={{\r\n                                        className : classes.helperText\r\n                                    }}\r\n                                />\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    id=\"username\"\r\n                                    label=\"User Name\"\r\n                                    name=\"username\"\r\n                                    autoFocus\r\n                                    value={values.username}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    helperText={(errors.username && touched.username) && errors.username}\r\n                                    FormHelperTextProps={{\r\n                                        className : classes.helperText\r\n                                    }}\r\n                                />\r\n\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    name=\"password\"\r\n                                    label=\"Password\"\r\n                                    type=\"password\"\r\n                                    id=\"password\"\r\n                                    autoComplete=\"current-password\"\r\n                                    value={values.password}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    helperText={(errors.password&&touched.password) && errors.password}\r\n                                    FormHelperTextProps={{\r\n                                        className : classes.helperText\r\n                                    }}\r\n                                />\r\n                                \r\n                                \r\n                                <FormControlLabel\r\n                                    control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n                                    label=\"Remember me\"\r\n                                />\r\n                                <Button\r\n                                    type='submit'\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    className={classes.submit}\r\n                                >\r\n                                    <div style={{minHeight:25}}>\r\n                                        {inProgress ?\r\n                                            <Bounce style={{marginTop:25}}/>\r\n                                            :\r\n                                            'Sign Up'\r\n                                        }\r\n                                    </div>\r\n\r\n                                </Button>\r\n                                {errorRegister ?\r\n                                    <p className={classes.helperText} style={{paddingLeft:15,fontSize:12,marginTop:-5}}>{errorRegister}</p>\r\n                                    :null}\r\n                                <Grid container>\r\n                                    <Grid item xs>\r\n                                        <Link href=\"#\" variant=\"body2\">\r\n                                            Forgot password?\r\n                                        </Link>\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <Link href=\"/signIn\" variant=\"body2\">\r\n                                            {\"Already have an account? Sign In\"}\r\n                                        </Link>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </form>\r\n                        </div>\r\n                        <Box mt={8}/>\r\n                    </>\r\n                )}\r\n            </Formik>\r\n        </Container>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    helperText : {\r\n        color : '#a20606'\r\n    }\r\n}));\r\n\r\n\r\nexport default RegisterScreen\r\n","D:\\DreamJobs\\client\\src\\index.tsx",[],"D:\\DreamJobs\\client\\src\\screens\\pageNotFound\\PageNotFound.tsx",[],"D:\\DreamJobs\\client\\src\\components\\footer\\Footer.tsx",[],"D:\\DreamJobs\\client\\src\\redux\\reducers\\index.ts",[],"D:\\DreamJobs\\client\\src\\redux\\reducers\\profileEmployeeReducers.ts",["211"],"import { string } from \"yup/lib/locale\";\r\nimport {EmployeeProfileActions} from \"../actions/profileEmployeeActions\";\r\n\r\ntype EmployeeProfileState = {\r\n    inProgress : boolean,\r\n    id : number | undefined,\r\n    email: string,\r\n    name : string,\r\n    phone : string,\r\n    imagePath : string | undefined,\r\n    lastName : string,\r\n    birthDate : Date | undefined,\r\n    gender : number,\r\n    adress : string,\r\n    languages : any[],\r\n    education : any,\r\n    experience : any,\r\n    skills : any[],\r\n    existEmployeeProfile : boolean\r\n}\r\n\r\nconst initialState = {\r\n    inProgress: false,\r\n    id: undefined,\r\n    email : '',\r\n    name: '',\r\n    phone: '',\r\n    imagePath : undefined,\r\n    lastName : '',\r\n    birthDate : undefined,\r\n    gender : 0,\r\n    adress : '',\r\n    languages : [],\r\n    education : undefined,\r\n    experience : undefined,\r\n    skills : [],\r\n    existEmployeeProfile : false\r\n}\r\n\r\nconst ProfileEmployeeReducer = (state : EmployeeProfileState = initialState,action : EmployeeProfileActions) =>{\r\n    switch (action.type) {\r\n        case \"SET_EMPLOYEE_PROFILE_IN_PROGRESS\":\r\n            return {\r\n                ...state,\r\n                inProgress:action.payload\r\n            }\r\n        case \"GET_EMPLOYEE_PROFILE_DATA\":\r\n            return {\r\n                ...state,\r\n                email:action.payload.email,\r\n                id : action.payload.id,\r\n                name : action.payload.name,\r\n                lastName :action.payload.lastName,\r\n                adress : action.payload.adress,\r\n                phone : action.payload.phone,\r\n                imagePath : action.payload.imagePath,\r\n                birthDate : action.payload.birthDate,\r\n                experience : action.payload.experience,\r\n                education : action.payload.education,\r\n                skills : action.payload.skills,\r\n                languages : action.payload.languages\r\n            }\r\n        case \"SET_EXIST_EMPLOYEE_PROFILE\":\r\n            return{\r\n                ...state,\r\n                existEmployeeProfile: action.payload\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport {ProfileEmployeeReducer}\r\n","D:\\DreamJobs\\client\\src\\redux\\reducers\\authReducers.ts",[],"D:\\DreamJobs\\client\\src\\functions\\createFormData.ts",[],"D:\\DreamJobs\\client\\src\\redux\\reducers\\generalReducers.ts",[],"D:\\DreamJobs\\client\\src\\redux\\actions\\generalActions.ts",[],"D:\\DreamJobs\\client\\src\\redux\\actions\\profileEmployeeActions.ts",[],"D:\\DreamJobs\\client\\src\\redux\\reducers\\positionReducer.ts",[],"D:\\DreamJobs\\client\\src\\reportWebVitals.ts",[],"D:\\DreamJobs\\client\\src\\redux\\actions\\positionActions.ts",[],"D:\\DreamJobs\\client\\src\\components\\vacantPosition\\positionItemCreate.tsx",["212","213","214"],{"ruleId":"215","replacedBy":"216"},{"ruleId":"217","replacedBy":"218"},{"ruleId":"219","severity":1,"message":"220","line":7,"column":8,"nodeType":"221","messageId":"222","endLine":7,"endColumn":18},{"ruleId":"219","severity":1,"message":"223","line":8,"column":8,"nodeType":"221","messageId":"222","endLine":8,"endColumn":11},{"ruleId":"224","severity":1,"message":"225","line":56,"column":3,"nodeType":"226","endLine":56,"endColumn":5,"suggestions":"227"},{"ruleId":"215","replacedBy":"228"},{"ruleId":"217","replacedBy":"229"},{"ruleId":"215","replacedBy":"230"},{"ruleId":"217","replacedBy":"231"},{"ruleId":"232","severity":1,"message":"233","line":33,"column":1,"nodeType":"234","endLine":74,"endColumn":2},{"ruleId":"224","severity":1,"message":"225","line":55,"column":7,"nodeType":"226","endLine":55,"endColumn":9,"suggestions":"235"},{"ruleId":"219","severity":1,"message":"236","line":2,"column":8,"nodeType":"221","messageId":"222","endLine":2,"endColumn":22},{"ruleId":"219","severity":1,"message":"237","line":9,"column":8,"nodeType":"221","messageId":"222","endLine":9,"endColumn":20},{"ruleId":"219","severity":1,"message":"238","line":10,"column":8,"nodeType":"221","messageId":"222","endLine":10,"endColumn":19},{"ruleId":"219","severity":1,"message":"239","line":11,"column":10,"nodeType":"221","messageId":"222","endLine":11,"endColumn":19},{"ruleId":"219","severity":1,"message":"240","line":11,"column":21,"nodeType":"221","messageId":"222","endLine":11,"endColumn":25},{"ruleId":"219","severity":1,"message":"241","line":13,"column":34,"nodeType":"221","messageId":"222","endLine":13,"endColumn":59},{"ruleId":"219","severity":1,"message":"242","line":15,"column":8,"nodeType":"221","messageId":"222","endLine":15,"endColumn":14},{"ruleId":"224","severity":1,"message":"225","line":31,"column":7,"nodeType":"226","endLine":31,"endColumn":9,"suggestions":"243"},{"ruleId":"215","replacedBy":"244"},{"ruleId":"217","replacedBy":"245"},{"ruleId":"219","severity":1,"message":"246","line":1,"column":15,"nodeType":"221","messageId":"222","endLine":1,"endColumn":23},{"ruleId":"219","severity":1,"message":"247","line":3,"column":26,"nodeType":"221","messageId":"222","endLine":3,"endColumn":37},{"ruleId":"219","severity":1,"message":"248","line":3,"column":48,"nodeType":"221","messageId":"222","endLine":3,"endColumn":56},{"ruleId":"219","severity":1,"message":"249","line":3,"column":62,"nodeType":"221","messageId":"222","endLine":3,"endColumn":72},{"ruleId":"219","severity":1,"message":"250","line":3,"column":73,"nodeType":"221","messageId":"222","endLine":3,"endColumn":77},{"ruleId":"219","severity":1,"message":"251","line":3,"column":90,"nodeType":"221","messageId":"222","endLine":3,"endColumn":95},{"ruleId":"219","severity":1,"message":"252","line":4,"column":8,"nodeType":"221","messageId":"222","endLine":4,"endColumn":12},{"ruleId":"219","severity":1,"message":"242","line":6,"column":8,"nodeType":"221","messageId":"222","endLine":6,"endColumn":14},{"ruleId":"219","severity":1,"message":"253","line":7,"column":8,"nodeType":"221","messageId":"222","endLine":7,"endColumn":14},{"ruleId":"219","severity":1,"message":"254","line":9,"column":22,"nodeType":"221","messageId":"222","endLine":9,"endColumn":33},{"ruleId":"219","severity":1,"message":"255","line":10,"column":9,"nodeType":"221","messageId":"222","endLine":10,"endColumn":25},{"ruleId":"219","severity":1,"message":"256","line":11,"column":9,"nodeType":"221","messageId":"222","endLine":11,"endColumn":14},{"ruleId":"219","severity":1,"message":"257","line":12,"column":8,"nodeType":"221","messageId":"222","endLine":12,"endColumn":14},{"ruleId":"219","severity":1,"message":"258","line":18,"column":11,"nodeType":"221","messageId":"222","endLine":18,"endColumn":16},{"ruleId":"219","severity":1,"message":"259","line":19,"column":11,"nodeType":"221","messageId":"222","endLine":19,"endColumn":21},{"ruleId":"219","severity":1,"message":"260","line":20,"column":11,"nodeType":"221","messageId":"222","endLine":20,"endColumn":19},{"ruleId":"219","severity":1,"message":"260","line":10,"column":7,"nodeType":"221","messageId":"222","endLine":10,"endColumn":15},{"ruleId":"219","severity":1,"message":"261","line":11,"column":7,"nodeType":"221","messageId":"222","endLine":11,"endColumn":14},{"ruleId":"219","severity":1,"message":"246","line":1,"column":24,"nodeType":"221","messageId":"222","endLine":1,"endColumn":32},{"ruleId":"219","severity":1,"message":"253","line":7,"column":10,"nodeType":"221","messageId":"222","endLine":7,"endColumn":16},{"ruleId":"219","severity":1,"message":"239","line":7,"column":18,"nodeType":"221","messageId":"222","endLine":7,"endColumn":27},{"ruleId":"219","severity":1,"message":"262","line":7,"column":29,"nodeType":"221","messageId":"222","endLine":7,"endColumn":40},{"ruleId":"219","severity":1,"message":"240","line":7,"column":42,"nodeType":"221","messageId":"222","endLine":7,"endColumn":46},{"ruleId":"219","severity":1,"message":"251","line":7,"column":60,"nodeType":"221","messageId":"222","endLine":7,"endColumn":65},{"ruleId":"219","severity":1,"message":"220","line":7,"column":78,"nodeType":"221","messageId":"222","endLine":7,"endColumn":88},{"ruleId":"219","severity":1,"message":"263","line":13,"column":10,"nodeType":"221","messageId":"222","endLine":13,"endColumn":16},{"ruleId":"264","severity":1,"message":"265","line":16,"column":28,"nodeType":"266","messageId":"267","endLine":16,"endColumn":29,"fix":"268"},{"ruleId":"219","severity":1,"message":"269","line":1,"column":17,"nodeType":"221","messageId":"222","endLine":1,"endColumn":26},{"ruleId":"219","severity":1,"message":"270","line":3,"column":25,"nodeType":"221","messageId":"222","endLine":3,"endColumn":28},{"ruleId":"219","severity":1,"message":"271","line":17,"column":10,"nodeType":"221","messageId":"222","endLine":17,"endColumn":32},{"ruleId":"219","severity":1,"message":"272","line":18,"column":10,"nodeType":"221","messageId":"222","endLine":18,"endColumn":32},{"ruleId":"219","severity":1,"message":"260","line":27,"column":9,"nodeType":"221","messageId":"222","endLine":27,"endColumn":17},{"ruleId":"273","severity":1,"message":"274","line":43,"column":19,"nodeType":"275","messageId":"276","endLine":43,"endColumn":21},{"ruleId":"277","severity":1,"message":"278","line":39,"column":50,"nodeType":"279","messageId":"280","endLine":39,"endColumn":51,"suggestions":"281"},{"ruleId":"224","severity":1,"message":"225","line":71,"column":7,"nodeType":"226","endLine":71,"endColumn":9,"suggestions":"282"},{"ruleId":"219","severity":1,"message":"283","line":23,"column":12,"nodeType":"221","messageId":"222","endLine":23,"endColumn":32},{"ruleId":"219","severity":1,"message":"284","line":75,"column":19,"nodeType":"221","messageId":"222","endLine":75,"endColumn":27},{"ruleId":"219","severity":1,"message":"284","line":91,"column":19,"nodeType":"221","messageId":"222","endLine":91,"endColumn":27},{"ruleId":"219","severity":1,"message":"259","line":50,"column":11,"nodeType":"221","messageId":"222","endLine":50,"endColumn":21},{"ruleId":"219","severity":1,"message":"285","line":1,"column":10,"nodeType":"221","messageId":"222","endLine":1,"endColumn":16},{"ruleId":"219","severity":1,"message":"269","line":1,"column":17,"nodeType":"221","messageId":"222","endLine":1,"endColumn":26},{"ruleId":"219","severity":1,"message":"251","line":8,"column":82,"nodeType":"221","messageId":"222","endLine":8,"endColumn":87},{"ruleId":"219","severity":1,"message":"272","line":11,"column":10,"nodeType":"221","messageId":"222","endLine":11,"endColumn":32},"no-native-reassign",["286"],"no-negated-in-lhs",["287"],"@typescript-eslint/no-unused-vars","'Typography' is defined but never used.","Identifier","unusedVar","'Box' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["288"],["286"],["287"],["286"],["287"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",["289"],"'InfiniteScroll' is defined but never used.","'PositionItem' is defined but never used.","'EditProfile' is defined but never used.","'Container' is defined but never used.","'Grid' is defined but never used.","'onGetEmployerImageProfile' is defined but never used.","'Config' is defined but never used.",["290"],["286"],["287"],"'useState' is defined but never used.","'CardActions' is defined but never used.","'Collapse' is defined but never used.","'IconButton' is defined but never used.","'Link' is defined but never used.","'Paper' is defined but never used.","'clsx' is defined but never used.","'Button' is defined but never used.","'useSelector' is defined but never used.","'ApplicationState' is defined but never used.","'Color' is defined but never used.","'Loader' is defined but never used.","'theme' is assigned a value but never used.","'navigation' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'classes' is assigned a value but never used.","'CssBaseline' is defined but never used.","'Bounce' is defined but never used.","dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"291","text":"292"},"'useEffect' is defined but never used.","'Add' is defined but never used.","'onExistEmployeeProfile' is defined but never used.","'onExistEmployerProfile' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["293","294"],["295"],"'existEmployeeProfile' is assigned a value but never used.","'response' is assigned a value but never used.","'string' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"296","fix":"297"},{"desc":"296","fix":"298"},{"desc":"296","fix":"299"},[593,600],"\r\n    .",{"messageId":"300","fix":"301","desc":"302"},{"messageId":"303","fix":"304","desc":"305"},{"desc":"296","fix":"306"},"Update the dependencies array to be: [dispatch]",{"range":"307","text":"308"},{"range":"309","text":"308"},{"range":"310","text":"308"},"removeEscape",{"range":"311","text":"312"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"313","text":"314"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"315","text":"308"},[1544,1546],"[dispatch]",[1979,1981],[1429,1431],[1523,1524],"",[1523,1523],"\\",[2695,2697]]