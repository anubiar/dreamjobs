[{"C:\\Users\\alexw\\dreamjobs\\src\\screens\\auth\\AuthScreen.tsx":"1","C:\\Users\\alexw\\dreamjobs\\src\\index.tsx":"2","C:\\Users\\alexw\\dreamjobs\\src\\screens\\auth\\RegisterScreen.tsx":"3","C:\\Users\\alexw\\dreamjobs\\src\\components\\footer\\Footer.tsx":"4","C:\\Users\\alexw\\dreamjobs\\src\\components\\vacantPosition\\positionItemCreate.tsx":"5","C:\\Users\\alexw\\dreamjobs\\src\\screens\\main\\Main.tsx":"6","C:\\Users\\alexw\\dreamjobs\\src\\components\\profile\\createEmployerProfile.tsx":"7","C:\\Users\\alexw\\dreamjobs\\src\\redux\\reducers\\profileEmployerReducers.ts":"8","C:\\Users\\alexw\\dreamjobs\\src\\screens\\pageNotFound\\PageNotFound.tsx":"9","C:\\Users\\alexw\\dreamjobs\\src\\screens\\profile\\ProfileScreen.tsx":"10","C:\\Users\\alexw\\dreamjobs\\src\\screens\\profile\\MyJobsEmployerProfile.tsx":"11","C:\\Users\\alexw\\dreamjobs\\src\\components\\navBar\\NavBar.tsx":"12","C:\\Users\\alexw\\dreamjobs\\src\\reportWebVitals.ts":"13","C:\\Users\\alexw\\dreamjobs\\src\\components\\vacantPosition\\positionItemList.tsx":"14","C:\\Users\\alexw\\dreamjobs\\src\\components\\navBar\\menupopper.tsx":"15","C:\\Users\\alexw\\dreamjobs\\src\\redux\\reducers\\generalReducers.ts":"16","C:\\Users\\alexw\\dreamjobs\\src\\components\\profile\\employerProfilePositionCard.tsx":"17","C:\\Users\\alexw\\dreamjobs\\src\\components\\profile\\employerProfilePositionList.tsx":"18","C:\\Users\\alexw\\dreamjobs\\src\\redux\\reducers\\index.ts":"19","C:\\Users\\alexw\\dreamjobs\\src\\redux\\actions\\authActions.ts":"20","C:\\Users\\alexw\\dreamjobs\\src\\functions\\createFormData.ts":"21","C:\\Users\\alexw\\dreamjobs\\src\\screens\\profile\\EditProfile.tsx":"22","C:\\Users\\alexw\\dreamjobs\\src\\redux\\store.ts":"23","C:\\Users\\alexw\\dreamjobs\\src\\redux\\actions\\positionActions.ts":"24","C:\\Users\\alexw\\dreamjobs\\src\\redux\\reducers\\profileEmployeeReducers.ts":"25","C:\\Users\\alexw\\dreamjobs\\src\\hooks\\useWindowDimenstions.tsx":"26","C:\\Users\\alexw\\dreamjobs\\src\\redux\\actions\\profileEmployerActions.ts":"27","C:\\Users\\alexw\\dreamjobs\\src\\components\\profile\\EmloyerProfileHeader.tsx":"28","C:\\Users\\alexw\\dreamjobs\\src\\navigation\\Navigation.tsx":"29","C:\\Users\\alexw\\dreamjobs\\src\\redux\\actions\\generalActions.ts":"30","C:\\Users\\alexw\\dreamjobs\\src\\redux\\reducers\\positionReducer.ts":"31","C:\\Users\\alexw\\dreamjobs\\src\\redux\\reducers\\authReducers.ts":"32","C:\\Users\\alexw\\dreamjobs\\src\\config\\config.ts":"33","C:\\Users\\alexw\\dreamjobs\\src\\components\\vacantPosition\\positionItem.tsx":"34","C:\\Users\\alexw\\dreamjobs\\src\\screens\\positions\\positionsDetailsScreen.tsx":"35","C:\\Users\\alexw\\dreamjobs\\src\\config\\Colors.ts":"36","C:\\Users\\alexw\\dreamjobs\\src\\components\\profile\\addGeneralInformation.tsx":"37","C:\\Users\\alexw\\dreamjobs\\src\\components\\forms\\FormWizard.tsx":"38","C:\\Users\\alexw\\dreamjobs\\src\\components\\pickers\\datepicker\\DatePickerField.tsx":"39","C:\\Users\\alexw\\dreamjobs\\src\\components\\profile\\createEmployeeProfileV2.tsx":"40","C:\\Users\\alexw\\dreamjobs\\src\\components\\profile\\addEducation.tsx":"41","C:\\Users\\alexw\\dreamjobs\\src\\components\\profile\\testWizard.tsx":"42","C:\\Users\\alexw\\dreamjobs\\src\\App.tsx":"43","C:\\Users\\alexw\\dreamjobs\\src\\redux\\actions\\profileEmployeeActions.ts":"44","C:\\Users\\alexw\\dreamjobs\\src\\initialValues\\employeeInitialValues.ts":"45","C:\\Users\\alexw\\dreamjobs\\src\\components\\pickers\\select\\LanguageSelect.tsx":"46","C:\\Users\\alexw\\dreamjobs\\src\\validation\\createEmployeeValidation.ts":"47","C:\\Users\\alexw\\dreamjobs\\src\\components\\profile\\addExperience.tsx":"48","C:\\Users\\alexw\\dreamjobs\\src\\services\\api.ts":"49","C:\\Users\\alexw\\dreamjobs\\src\\components\\profile\\languageList.tsx":"50"},{"size":7471,"mtime":1611071779285,"results":"51","hashOfConfig":"52"},{"size":519,"mtime":1611071779255,"results":"53","hashOfConfig":"52"},{"size":8621,"mtime":1611071779286,"results":"54","hashOfConfig":"52"},{"size":884,"mtime":1611071779249,"results":"55","hashOfConfig":"52"},{"size":5636,"mtime":1612266852733,"results":"56","hashOfConfig":"52"},{"size":2185,"mtime":1612547923709,"results":"57","hashOfConfig":"52"},{"size":8564,"mtime":1611072034002,"results":"58","hashOfConfig":"52"},{"size":2535,"mtime":1611225892819,"results":"59","hashOfConfig":"52"},{"size":148,"mtime":1611071779287,"results":"60","hashOfConfig":"52"},{"size":2943,"mtime":1612452306427,"results":"61","hashOfConfig":"52"},{"size":1520,"mtime":1611235170875,"results":"62","hashOfConfig":"52"},{"size":6375,"mtime":1611072033999,"results":"63","hashOfConfig":"52"},{"size":440,"mtime":1611071779285,"results":"64","hashOfConfig":"52"},{"size":839,"mtime":1612266973884,"results":"65","hashOfConfig":"52"},{"size":4881,"mtime":1611232739030,"results":"66","hashOfConfig":"52"},{"size":2181,"mtime":1612693005377,"results":"67","hashOfConfig":"52"},{"size":2049,"mtime":1611244732934,"results":"68","hashOfConfig":"52"},{"size":901,"mtime":1611175939731,"results":"69","hashOfConfig":"52"},{"size":1036,"mtime":1611073157084,"results":"70","hashOfConfig":"52"},{"size":2454,"mtime":1611071779281,"results":"71","hashOfConfig":"52"},{"size":1205,"mtime":1611071779253,"results":"72","hashOfConfig":"52"},{"size":8851,"mtime":1611071779289,"results":"73","hashOfConfig":"52"},{"size":1277,"mtime":1611079474923,"results":"74","hashOfConfig":"52"},{"size":2292,"mtime":1611071779281,"results":"75","hashOfConfig":"52"},{"size":2163,"mtime":1611071779283,"results":"76","hashOfConfig":"52"},{"size":678,"mtime":1611071779254,"results":"77","hashOfConfig":"52"},{"size":3560,"mtime":1611235442092,"results":"78","hashOfConfig":"52"},{"size":2620,"mtime":1611236357772,"results":"79","hashOfConfig":"52"},{"size":6739,"mtime":1612547389966,"results":"80","hashOfConfig":"52"},{"size":4183,"mtime":1611071779281,"results":"81","hashOfConfig":"52"},{"size":1477,"mtime":1611071779283,"results":"82","hashOfConfig":"52"},{"size":1627,"mtime":1611072034005,"results":"83","hashOfConfig":"52"},{"size":185,"mtime":1611071779253,"results":"84","hashOfConfig":"52"},{"size":1969,"mtime":1612281487789,"results":"85","hashOfConfig":"52"},{"size":3598,"mtime":1612265016789,"results":"86","hashOfConfig":"52"},{"size":87,"mtime":1611071779252,"results":"87","hashOfConfig":"52"},{"size":2763,"mtime":1612718963467,"results":"88","hashOfConfig":"52"},{"size":2783,"mtime":1612608539972,"results":"89","hashOfConfig":"52"},{"size":1636,"mtime":1612622065165,"results":"90","hashOfConfig":"52"},{"size":2398,"mtime":1612728852749,"results":"91","hashOfConfig":"52"},{"size":1938,"mtime":1612719547222,"results":"92","hashOfConfig":"52"},{"size":4685,"mtime":1612613492336,"results":"93","hashOfConfig":"52"},{"size":573,"mtime":1611071779247,"results":"94","hashOfConfig":"52"},{"size":3070,"mtime":1612546982006,"results":"95","hashOfConfig":"52"},{"size":1222,"mtime":1612719103025,"results":"96","hashOfConfig":"52"},{"size":1674,"mtime":1612728824823,"results":"97","hashOfConfig":"52"},{"size":2247,"mtime":1612718908441,"results":"98","hashOfConfig":"52"},{"size":1730,"mtime":1612719950502,"results":"99","hashOfConfig":"52"},{"size":2260,"mtime":1611071779290,"results":"100","hashOfConfig":"52"},{"size":776,"mtime":1612729403290,"results":"101","hashOfConfig":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"105"},"1klusan",{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"108"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"108"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"120"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"108"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"108"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"108"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"108"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"160"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"168"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"174"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"168"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"191","messages":"192","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"108"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"198","messages":"199","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"204","messages":"205","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"217","messages":"218","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"221","messages":"222","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"223","messages":"224","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\alexw\\dreamjobs\\src\\screens\\auth\\AuthScreen.tsx",["225"],"import React, {useRef, useState} from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\n// @ts-ignore\r\nimport { Bounce } from 'react-activity';\r\nimport 'react-activity/dist/react-activity.css';\r\nimport * as yup from 'yup'\r\nimport {Formik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {onLogin} from \"../../redux/actions/authActions\";\r\nimport {ApplicationState} from \"../../redux/reducers\";\r\n\r\nconst initFormValue = {\r\n    email: '',\r\n    password: '',\r\n}\r\nconst validationSchema = yup.object().shape({\r\n    email: yup.string()\r\n        .label('email')\r\n        .email('Enter a valid email')\r\n        .required('Please enter an email'),\r\n    password: yup.string()\r\n        .label('Password')\r\n        .required('Please enter your password')\r\n        .min(4, 'Password must have at least 4 characters '),\r\n});\r\n\r\n\r\nconst AuthScreen = () =>{\r\n    const dispatch = useDispatch();\r\n    const classes = useStyles();\r\n    const {inProgress,error} = useSelector((state: ApplicationState) => state.authReducer);\r\n    const formikRef = useRef(null);\r\n\r\n\r\n    const onSignIn= (values : any) => {\r\n        dispatch(onLogin(values))\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <Formik\r\n                innerRef={formikRef}\r\n                validationSchema={validationSchema}\r\n                initialValues={initFormValue}\r\n                onSubmit={(values) => onSignIn(values)}\r\n            >\r\n                {({\r\n                      values,\r\n                      touched,\r\n                      errors,\r\n                      handleChange,\r\n                      handleBlur,\r\n                      handleSubmit\r\n                  }) => (\r\n                    <>\r\n                        <CssBaseline />\r\n                        <div className={classes.paper}>\r\n                            <Avatar className={classes.avatar}>\r\n                                <LockOutlinedIcon />\r\n                            </Avatar>\r\n                            <Typography component=\"h1\" variant=\"h5\">\r\n                                Sign in\r\n                            </Typography>\r\n                            <form className={classes.form} onSubmit={handleSubmit}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    id=\"email\"\r\n                                    label=\"Email Address\"\r\n                                    name=\"email\"\r\n                                    autoComplete=\"email\"\r\n                                    autoFocus\r\n                                    value={values.email}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    helperText={(errors.email && touched.email) && errors.email}\r\n                                    FormHelperTextProps={{\r\n                                        className : classes.helperText\r\n                                    }}\r\n                                />\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    name=\"password\"\r\n                                    label=\"Password\"\r\n                                    type=\"password\"\r\n                                    id=\"password\"\r\n                                    autoComplete=\"current-password\"\r\n                                    value={values.password}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    helperText={(errors.password&&touched.password) && errors.password}\r\n                                    FormHelperTextProps={{\r\n                                        className : classes.helperText\r\n                                    }}\r\n                                />\r\n                                <FormControlLabel\r\n                                    control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n                                    label=\"Remember me\"\r\n                                />\r\n                                <Button\r\n                                    type='submit'\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    className={classes.submit}\r\n                                >\r\n                                     <div style={{minHeight:25}}>\r\n                                         {inProgress ?\r\n                                            <Bounce style={{marginTop:25}}/>\r\n                                         :\r\n                                         'Sign in'\r\n                                         }\r\n                                     </div>\r\n                                </Button>\r\n                                {error ?\r\n                                <p className={classes.helperText} style={{paddingLeft:15,fontSize:12,marginTop:-5}}>{error}</p>\r\n                                :null}\r\n                                <Grid container>\r\n                                    <Grid item xs>\r\n                                        <Link href=\"#\" variant=\"body2\">\r\n                                            Forgot password?\r\n                                        </Link>\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <Link href=\"/signUp\" variant=\"body2\">\r\n                                            {\"Don't have an account? Sign Up\"}\r\n                                        </Link>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </form>\r\n                        </div>\r\n                        <Box mt={8}/>\r\n                    </>\r\n                )}\r\n            </Formik>\r\n        </Container>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    helperText : {\r\n        color : '#a20606'\r\n    },\r\n}));\r\n\r\nexport default AuthScreen\r\n",["226","227"],"C:\\Users\\alexw\\dreamjobs\\src\\index.tsx",[],["228","229"],"C:\\Users\\alexw\\dreamjobs\\src\\screens\\auth\\RegisterScreen.tsx",["230"],"import React, {useRef} from \"react\";\r\nimport * as yup from \"yup\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {ApplicationState} from \"../../redux/reducers\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport {Formik} from \"formik\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Box from \"@material-ui/core/Box\";\r\n// @ts-ignore\r\nimport { Bounce } from 'react-activity';\r\nimport {onRegister} from \"../../redux/actions/authActions\";\r\nimport { useHistory } from \"react-router\";\r\n\r\n\r\n\r\nconst initFormValue = {\r\n    email: '',\r\n    password: '',\r\n    username: ''\r\n}\r\nconst validationSchema = yup.object().shape({\r\n    email: yup.string()\r\n        .label('Email')\r\n        .email('Enter a valid email')\r\n        .required('Please enter an email'),\r\n    password: yup.string()\r\n        .label('Password')\r\n        .required('Please enter your password')\r\n        .min(4, 'Password must have at least 4 characters '),\r\n    username: yup.string()\r\n    .required(\"User name required\")\r\n    .min(3,\"min 3 characters\")\r\n});\r\n\r\nconst RegisterScreen = () => {\r\n    const dispatch = useDispatch();\r\n    const classes = useStyles();\r\n    const {inProgress,errorRegister} = useSelector((state: ApplicationState) => state.authReducer);\r\n    const formikRef = useRef(null);\r\n    const navigation = useHistory();\r\n\r\n    const onSignUp= (values : any) => {\r\n        dispatch(onRegister(values));\r\n    }\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <Formik\r\n                innerRef={formikRef}\r\n                validationSchema={validationSchema}\r\n                initialValues={initFormValue}\r\n                onSubmit={(values) => onSignUp(values)}\r\n            >\r\n                {({\r\n                    values,\r\n                    touched,\r\n                    errors,\r\n                    handleChange,\r\n                    handleBlur,\r\n                    handleSubmit\r\n                  }) => (\r\n                    <>\r\n                        <CssBaseline />\r\n                        <div className={classes.paper}>\r\n                            <Avatar className={classes.avatar}>\r\n                                <LockOutlinedIcon />\r\n                            </Avatar>\r\n                            <Typography component=\"h1\" variant=\"h5\">\r\n                                Sign Up\r\n                            </Typography>\r\n                            <form className={classes.form} onSubmit={handleSubmit}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    id=\"email\"\r\n                                    label=\"Email Address\"\r\n                                    name=\"email\"\r\n                                    autoComplete=\"username\"\r\n                                    autoFocus\r\n                                    value={values.email}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    helperText={(errors.email && touched.email) && errors.email}\r\n                                    FormHelperTextProps={{\r\n                                        className : classes.helperText\r\n                                    }}\r\n                                />\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    id=\"username\"\r\n                                    label=\"User Name\"\r\n                                    name=\"username\"\r\n                                    autoFocus\r\n                                    value={values.username}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    helperText={(errors.username && touched.username) && errors.username}\r\n                                    FormHelperTextProps={{\r\n                                        className : classes.helperText\r\n                                    }}\r\n                                />\r\n\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    name=\"password\"\r\n                                    label=\"Password\"\r\n                                    type=\"password\"\r\n                                    id=\"password\"\r\n                                    autoComplete=\"current-password\"\r\n                                    value={values.password}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    helperText={(errors.password&&touched.password) && errors.password}\r\n                                    FormHelperTextProps={{\r\n                                        className : classes.helperText\r\n                                    }}\r\n                                />\r\n                                \r\n                                \r\n                                <FormControlLabel\r\n                                    control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n                                    label=\"Remember me\"\r\n                                />\r\n                                <Button\r\n                                    type='submit'\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    className={classes.submit}\r\n                                >\r\n                                    <div style={{minHeight:25}}>\r\n                                        {inProgress ?\r\n                                            <Bounce style={{marginTop:25}}/>\r\n                                            :\r\n                                            'Sign Up'\r\n                                        }\r\n                                    </div>\r\n\r\n                                </Button>\r\n                                {errorRegister ?\r\n                                    <p className={classes.helperText} style={{paddingLeft:15,fontSize:12,marginTop:-5}}>{errorRegister}</p>\r\n                                    :null}\r\n                                <Grid container>\r\n                                    <Grid item xs>\r\n                                        <Link href=\"#\" variant=\"body2\">\r\n                                            Forgot password?\r\n                                        </Link>\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <Link href=\"/signIn\" variant=\"body2\">\r\n                                            {\"Already have an account? Sign In\"}\r\n                                        </Link>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </form>\r\n                        </div>\r\n                        <Box mt={8}/>\r\n                    </>\r\n                )}\r\n            </Formik>\r\n        </Container>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    helperText : {\r\n        color : '#a20606'\r\n    }\r\n}));\r\n\r\n\r\nexport default RegisterScreen\r\n","C:\\Users\\alexw\\dreamjobs\\src\\components\\footer\\Footer.tsx",[],"C:\\Users\\alexw\\dreamjobs\\src\\components\\vacantPosition\\positionItemCreate.tsx",["231","232","233","234"],"import React, { useEffect, useRef } from 'react';\r\nimport {Formik} from 'formik';\r\nimport * as yup from 'yup';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\nimport { ApplicationState } from '../../redux/reducers';\r\nimport { onPostPosition } from '../../redux/actions/positionActions';\r\nimport { Button, Checkbox, Container, CssBaseline, FormControlLabel, makeStyles, Paper, TextareaAutosize, TextField, Typography } from '@material-ui/core';\r\n//@ts-ignore\r\nimport { Bounce } from 'react-activity';\r\nimport { onExistEmployerProfile } from '../../redux/actions/profileEmployerActions';\r\n\r\n\r\nconst initFormValue={\r\n    positionName: '',\r\n    salary: '',\r\n    positionDescription: '',\r\n    country: '',\r\n    isRemote: false\r\n\r\n};\r\n\r\n\r\nconst validationSchema = yup.object().shape({\r\n    positionName: yup.string()\r\n    .label('positionName')\r\n    .required(\"Please give a name for position you are to open\")\r\n    .min(5,\"Position name needs to at 5 charachers long\")\r\n    .max(50,\"Position name cannot exceed 50 charachters length\"),\r\n    salary: yup.string()\r\n    .label('salary')\r\n    .max(50000,\"Salary number cannot exceed 50000\"),\r\n    country: yup.string()\r\n    .required(\"Please select a country for your position\")\r\n    .label('country'),\r\n    positionDesription: yup.string()\r\n    .notRequired()\r\n    .label(\"positionDescription\"),\r\n    isRemote: yup.bool()\r\n    .notRequired()\r\n    .label(\"isRemote\")\r\n});\r\n\r\n\r\n\r\n\r\nconst PostVacantPositionForm = () => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const classes = useStyles();\r\n    const formikRef = useRef(null);\r\n\r\n    \r\n    const {inProgress} = useSelector((state :ApplicationState) => state.positionReducer);\r\n\r\n    const onPostVacantPosition = async (values : any) => {\r\n        console.log(values);\r\n        await dispatch(onPostPosition(values));\r\n        history.replace('/');\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"md\" className={classes.root}>\r\n            <Formik initialValues={initFormValue} innerRef = {formikRef} validationSchema={validationSchema} onSubmit={(values) => onPostVacantPosition(values)}>\r\n                {\r\n                    ({values,errors,touched,handleBlur,handleChange,handleSubmit}) => (\r\n                        <>\r\n                            <CssBaseline>\r\n                                \r\n                                    <Typography>\r\n                                        Open position  \r\n                                    </Typography>\r\n\r\n                                    <form onSubmit={handleSubmit}>\r\n                                        <TextField value={values.positionName} variant='outlined' margin='normal' fullWidth name=\"positionName\" id=\"positionName\" label=\"Position Name\" autoFocus onChange={handleChange} onBlur={handleBlur} helperText={(errors.positionName && touched.positionName) && errors.positionName}/>\r\n                                        <TextField value={values.salary} variant='outlined' margin='normal' fullWidth type=\"number\" name=\"salary\" id=\"salary\" label=\"Salary\" onChange={handleChange} onBlur={handleBlur} helperText={(errors.salary && touched.salary) && errors.salary}/>\r\n                                        <TextField multiline value={values.positionDescription} variant='outlined' margin='normal' fullWidth name=\"positionDescription\" id=\"positionDescription\" label=\"Position Description\" autoFocus onChange={handleChange} onBlur={handleBlur} helperText={(errors.positionDescription && touched.positionDescription) && errors.positionDescription}/>\r\n                                        {/* <TextareaAutosize /> */}\r\n                                        <TextField value={values.country} variant='outlined' margin='normal' fullWidth name=\"country\" id=\"country\" label=\"Country\" onChange={handleChange} onBlur={handleBlur} helperText={(errors.country && touched.country) && errors.country}/>\r\n                                        <FormControlLabel label=\"Remote\" control={<Checkbox onChange={handleChange} checked={values.isRemote} id=\"isRemote\" name=\"isRemote\" value={values.isRemote}/>}/>\r\n                                        \r\n                                        <Button\r\n                                            type='submit'\r\n                                            fullWidth\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            className={classes.submit}\r\n                                        >\r\n                                    <div style={{minHeight:25}}>\r\n                                        {inProgress ?\r\n                                            <div style={{paddingTop:10}}>\r\n                                                <Bounce />\r\n                                            </div>\r\n                                            :\r\n                                            'Add Position'\r\n                                        }\r\n                                    </div>\r\n                                </Button>\r\n                                    </form>\r\n                                \r\n                            </CssBaseline>\r\n                        </>\r\n                    )\r\n                }\r\n            </Formik>\r\n        </Container>\r\n    )\r\n}\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root:{\r\n        marginTop: 100,\r\n        marginBottom: 100\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\nexport {PostVacantPositionForm};","C:\\Users\\alexw\\dreamjobs\\src\\screens\\main\\Main.tsx",["235","236","237","238","239","240","241","242"],"import React, {useEffect} from \"react\";\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {ApplicationState} from \"../../redux/reducers\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport { onGetPositionsMain } from \"../../redux/actions/positionActions\";\r\nimport { Color } from \"../../config/Colors\";\r\nimport PositionItem from \"../../components/vacantPosition/positionItem\";\r\nimport EditProfile from \"../profile/EditProfile\";\r\nimport { Container, Grid } from \"@material-ui/core\";\r\nimport PositionItemList from \"../../components/vacantPosition/positionItemList\";\r\nimport { onExistEmployerProfile, onGetEmployerProfileData } from \"../../redux/actions/profileEmployerActions\";\r\nimport { onExistEmployeeProfile } from \"../../redux/actions/profileEmployeeActions\";\r\nimport Config from \"../../config/config\";\r\n\r\n\r\nconst Main = () => {\r\n    const dispatch = useDispatch();\r\n    const classes = useStyles();\r\n\r\n    const {PositionsMain,inProgressPositionsMain} = useSelector((state:ApplicationState) => state.positionReducer);\r\n\r\n    useEffect( () => { \r\n       (async () => {dispatch(onGetPositionsMain());\r\n        await dispatch(onExistEmployerProfile());\r\n        dispatch(onExistEmployeeProfile());\r\n    })()\r\n        \r\n    },[])\r\n\r\n    return (\r\n        <div>\r\n            {inProgressPositionsMain ?\r\n                <div className={classes.center}>\r\n                    <Loader type={'Puff'} color={Color.secondaryColor}/>\r\n                </div>\r\n                :\r\n                <div>\r\n                    <main>\r\n                        <PositionItemList positionItems={PositionsMain}/>                    \r\n                    </main>\r\n\r\n                   \r\n                    \r\n                   \r\n                    \r\n                    \r\n                </div>\r\n                \r\n\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    center: {\r\n        position: 'absolute',\r\n        left: '50%',\r\n        top: '50%',\r\n        transform: 'translate(-50%, -50%)'\r\n    },\r\n}));\r\n\r\nexport default Main;\r\n",["243","244"],"C:\\Users\\alexw\\dreamjobs\\src\\components\\profile\\createEmployerProfile.tsx",["245","246"],"import React, { useEffect, useRef } from 'react';\r\nimport * as yup from \"yup\";\r\nimport {Formik} from 'formik';\r\nimport { Button, Container, InputAdornment, makeStyles, MenuItem, TextField } from '@material-ui/core';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { onUpdateEmployerProfile } from '../../redux/actions/profileEmployerActions';\r\nimport { useHistory } from 'react-router';\r\n//@ts-ignore\r\nimport { Bounce } from 'react-activity';\r\nimport { ApplicationState } from '../../redux/reducers';\r\nimport { DropzoneArea } from 'material-ui-dropzone';\r\nimport { onGetAllCompanyTypes } from '../../redux/actions/generalActions';\r\nimport Loader from 'react-loader-spinner';\r\n\r\nconst initialValues = {\r\n        companyName : '',\r\n        companyAdress : '',\r\n        companyNumber : '',\r\n        fiscalCode : '',\r\n        companyRepresentant: '',\r\n        typeId : '',\r\n        imagePath: []\r\n}\r\nconst validationSchema = yup.object().shape({\r\n    companyName: yup.string()\r\n    .label(\"companyName\")\r\n    .required(\"Please give the name of your company\")\r\n    .min(5,\"Company name must be at least 5\")\r\n    .max(50,\"Company name must be maximum 50 characters\"),\r\n    companyAdress: yup.string()\r\n    .label(\"companyAdress\")\r\n    .required(\"Adress of company not provided\")\r\n    .min(5,\"Min 5 characters\")\r\n    .max(50,\"Max 50 characters\"),\r\n    companyNumber: yup.string()\r\n    .label(\"companyNumber\")\r\n    .required(\"Provide a phone number\")\r\n    .trim()\r\n    .matches(/^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\s\\./0-9]*$/,\"Number should be of format +(123)-456-67-89\"),\r\n    fiscalCode : yup.string()\r\n    .label(\"fiscalCode\")\r\n    .min(13,\"Must be 13 characters\")\r\n    .max(13,\"13 character\"),\r\n    companyRepresentant: yup.string()\r\n    .label(\"companyRepresentant\"),\r\n    typeId: yup.string()\r\n    .label(\"typeId\")\r\n    .required(\"Please select company type\"),\r\n    imagePath : yup.array()\r\n        .label('imagePath')\r\n        .max(1,'No more than 1 image'),\r\n    \r\n});\r\nconst CreateEmployerProfile = () => {\r\n    const formikRef = useRef<any>(null);\r\n    const dispatch = useDispatch();\r\n    const classes = useStyles();\r\n    const navigation = useHistory();\r\n    const onCreateEmployerProfile = async (values : any) => {\r\n        console.log(values);\r\n        await dispatch(onUpdateEmployerProfile(values));\r\n        console.log(values);\r\n        navigation.replace(\"/\");\r\n    } \r\n   \r\n    const {inProgress} = useSelector((state : ApplicationState) => state.profileEmployerReducers);\r\n    const {isLoadingCompanyTypes,companyTypes} = useSelector((state : ApplicationState) => state.generalReducers);\r\n\r\n    useEffect(() => {\r\n        dispatch(onGetAllCompanyTypes());\r\n    },[])\r\n\r\n    return(\r\n        <div>\r\n            <Container className={classes.root} maxWidth={'md'}>\r\n                <Formik initialValues={initialValues} innerRef={formikRef} validationSchema={validationSchema} onSubmit={(values) => onCreateEmployerProfile(values)}>\r\n                {\r\n                    ({errors,values,touched,handleBlur,handleChange,handleSubmit}) => (\r\n                        <form onSubmit={handleSubmit}>\r\n                            <DropzoneArea\r\n                                    acceptedFiles={['image/*']}\r\n                                    filesLimit={1}\r\n                                    dropzoneText={\"Drag and drop an image here or click\"}\r\n                                    onChange={(image) => formikRef?.current?.setFieldValue('imagePath',image)}\r\n                                />\r\n                                {(errors.imagePath&&touched.imagePath) && errors.imagePath ?\r\n                                <p className={classes.helperText} style={{paddingLeft:15,fontSize:12,marginBottom:-15}}>\r\n                                    {(errors.imagePath&&touched.imagePath) && errors.imagePath}\r\n                                </p>\r\n                                : null}\r\n                            <TextField value={values.companyName} variant=\"outlined\" margin=\"normal\" fullWidth name=\"companyName\" id=\"companyName\" label=\"Company Name\" autoFocus onChange={handleChange} onBlur={handleBlur} helperText={(errors.companyName && touched.companyName) && errors.companyName}/>\r\n                            <TextField value={values.companyRepresentant} variant=\"outlined\" margin=\"normal\" fullWidth name=\"companyRepresentant\" id=\"companyRepresentant\" label=\"Company Representant\"  onChange={handleChange} onBlur={handleBlur}/>\r\n                            <TextField value={values.companyAdress} variant=\"outlined\" margin=\"normal\" fullWidth name=\"companyAdress\" id=\"companyAdress\" label=\"Company Adress\"  onChange={handleChange} onBlur={handleBlur} helperText={(errors.companyAdress && touched.companyAdress) && errors.companyAdress}/>\r\n                            <TextField value={values.companyNumber} variant=\"outlined\" margin=\"normal\" fullWidth name=\"companyNumber\" id=\"companyNumber\" label=\"Company Phone Number\"  onChange={handleChange} onBlur={handleBlur} helperText={(errors.companyNumber && touched.companyNumber) && errors.companyNumber}/>\r\n                            <TextField value={values.fiscalCode} variant=\"outlined\" margin=\"normal\" fullWidth name=\"fiscalCode\" id=\"fiscalCode\" label=\"Company Tax Number\"  onChange={handleChange} onBlur={handleBlur} helperText={(errors.fiscalCode && touched.fiscalCode) && errors.fiscalCode}/>\r\n                            <TextField\r\n                                    variant=\"outlined\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    name=\"typeId\"\r\n                                    label=\"Type\"\r\n                                    select\r\n                                    id=\"typeId\"\r\n                                    InputLabelProps={{\r\n                                        shrink: !isLoadingCompanyTypes,\r\n                                    }}\r\n                                    InputProps={{\r\n                                        readOnly: isLoadingCompanyTypes,\r\n                                        startAdornment: isLoadingCompanyTypes ? (\r\n                                            <InputAdornment position=\"start\">\r\n                                                <Loader height={15} width={15} type={\"Circles\"} color={'#a50101'}/>\r\n                                            </InputAdornment>\r\n                                        ) : null,\r\n                                    }}\r\n                                    value={values.typeId}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    helperText={(errors.typeId&&touched.typeId) && errors.typeId}\r\n                                    FormHelperTextProps={{\r\n                                        className : classes.helperText\r\n                                    }}\r\n                                >\r\n                                    {companyTypes.map((option) => (\r\n                                        <MenuItem key={option.companyTypeId} value={option.companyTypeId}>\r\n                                            {option.typeName}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </TextField>\r\n                                \r\n                            <Button type='submit' fullWidth variant=\"contained\">\r\n                                <div style={{minHeight:25}}>\r\n                                    {\r\n                                        inProgress\r\n                                        ?\r\n                                        <div style={{paddingTop:10}}>\r\n                                            <Bounce/>\r\n                                        </div>\r\n                                        \r\n                                        :\r\n                                        \"Submit\"\r\n                                    }\r\n                                    \r\n                                </div>\r\n                               \r\n                            </Button>\r\n                        </form>\r\n                    )\r\n                }\r\n                </Formik>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root:{\r\n        marginTop: 100,\r\n        marginBottom: 100,\r\n        \r\n    },\r\n    helperText : {\r\n        color : '#a20606'\r\n    }\r\n}));\r\n\r\nexport default CreateEmployerProfile;\r\n","C:\\Users\\alexw\\dreamjobs\\src\\redux\\reducers\\profileEmployerReducers.ts",[],["247","248"],"C:\\Users\\alexw\\dreamjobs\\src\\screens\\pageNotFound\\PageNotFound.tsx",[],"C:\\Users\\alexw\\dreamjobs\\src\\screens\\profile\\ProfileScreen.tsx",["249","250","251","252"],"import React, { useEffect, useState } from \"react\";\r\nimport EditProfile from \"./EditProfile\";\r\nimport  EditExperience  from \"./EditExperience\";\r\nimport { makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { onGetEmployeeProfileData } from \"../../redux/actions/profileEmployeeActions\";\r\nimport PositionItem from \"../../components/vacantPosition/positionItem\";\r\nimport { EditEducation } from \"./EditEducation\";\r\n\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  index: any;\r\n  value: any;\r\n}\r\n\r\nfunction TabPanel(props: TabPanelProps) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`vertical-tabpanel-${index}`}\r\n      aria-labelledby={`vertical-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && \r\n        \r\n          children\r\n        \r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction a11yProps(index: any) {\r\n  return {\r\n    id: `vertical-tab-${index}`,\r\n    \"aria-controls\": `vertical-tabpanel-${index}`,\r\n  };\r\n}\r\nconst ProfileScreen = () => {\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n  const [value, setValue] = useState(0);\r\n\r\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(onGetEmployeeProfileData())\r\n},[])\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Tabs\r\n        orientation=\"vertical\"\r\n        variant=\"fullWidth\"\r\n        value={value}\r\n        onChange={handleChange}\r\n        aria-label=\"Profile Components\"\r\n        className={classes.tabs}\r\n      >\r\n        <Tab label=\"General information\" {...a11yProps(0)}/>\r\n        <Tab label=\"Experience\" {...a11yProps(1)}/>\r\n        <Tab label=\"Education\" {...a11yProps(2)}/>\r\n        <Tab label=\"Languages\" {...a11yProps(3)}/>\r\n        <Tab label=\"Skills\" {...a11yProps(4)}/>\r\n      </Tabs>\r\n\r\n      <TabPanel value={value} index={0}>\r\n        <EditProfile />\r\n      </TabPanel>\r\n      <TabPanel value={value} index={1}>\r\n        <EditExperience />\r\n      </TabPanel>\r\n      <TabPanel value={value} index={2}>\r\n        <EditEducation />\r\n      </TabPanel>\r\n      <TabPanel value={value} index={3}>\r\n        Edit Languages\r\n      </TabPanel>\r\n      <TabPanel value={value} index={4}>\r\n        Edit Skiils\r\n      </TabPanel>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.paper,\r\n    display: \"flex\",\r\n    width: undefined,\r\n    height: undefined,\r\n    marginTop:100,\r\n  },\r\n  tabs: {\r\n    borderRight: `1px solid ${theme.palette.divider}`,\r\n  },\r\n}));\r\n\r\nexport default ProfileScreen;\r\n","C:\\Users\\alexw\\dreamjobs\\src\\screens\\profile\\MyJobsEmployerProfile.tsx",["253","254"],"import { Container, makeStyles } from \"@material-ui/core\";\r\nimport React, { useEffect } from \"react\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport EmployerProfileHeader from \"../../components/profile/EmloyerProfileHeader\";\r\nimport EmployerPositionProfileList from \"../../components/profile/employerProfilePositionList\";\r\nimport { Color } from \"../../config/Colors\";\r\nimport { onGetEmployerProfileData } from \"../../redux/actions/profileEmployerActions\";\r\nimport { ApplicationState } from \"../../redux/reducers\";\r\n\r\n\r\n\r\nconst MyJobsEmployerProfileScreen = () => {\r\n    const dispatch = useDispatch();\r\n    const {inProgress} = useSelector((state : ApplicationState) => state.profileEmployerReducers);\r\n    const classes = useStyles();\r\n    useEffect(() => {\r\n        dispatch(onGetEmployerProfileData());\r\n    },[]);\r\n    return(\r\n        <>\r\n            {\r\n            inProgress\r\n            ?\r\n            <div className={classes.center}>\r\n                    <Loader type={'Puff'} color={Color.secondaryColor}/>\r\n            </div>\r\n            :\r\n            <>\r\n            <EmployerProfileHeader />\r\n            <EmployerPositionProfileList />\r\n            </>\r\n        }\r\n        </>\r\n        \r\n        \r\n    )\r\n}\r\nconst useStyles = makeStyles((theme) => ({\r\n    center : {\r\n        position: \"absolute\",\r\n        left: '50%',\r\n        right: '50%',\r\n        transform: 'translate(-50%,-50%)'\r\n    }\r\n}))\r\nexport default MyJobsEmployerProfileScreen;","C:\\Users\\alexw\\dreamjobs\\src\\components\\navBar\\NavBar.tsx",["255","256","257","258","259","260"],"import React, { useEffect } from \"react\";\r\nimport { fade, makeStyles } from \"@material-ui/core/styles\";\r\nimport { AccountCircle, Add, Home, Search } from \"@material-ui/icons\";\r\nimport {\r\n  AppBar,\r\n  IconButton,\r\n  InputBase,\r\n  Link,\r\n  Toolbar,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router\";\r\nimport { ApplicationState } from \"../../redux/reducers\";\r\nimport MenuListComposition from \"./menupopper\";\r\nimport { onExistEmployeeProfile } from \"../../redux/actions/profileEmployeeActions\";\r\nimport { onExistEmployerProfile } from \"../../redux/actions/profileEmployerActions\";\r\n\r\nenum routerEnum {\r\n  main = \"/\",\r\n  jobProfile = \"/createJobProfile\",\r\n  hireProfile = \"/createHireProfile\",\r\n}\r\n\r\nconst NavBar = () => {\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n  const location = useLocation();\r\n  const { pathname } = location;\r\n  const navigation = useHistory();\r\n  \r\n  const { existEmployeeProfile } = useSelector(\r\n    (state: ApplicationState) => state.profileEmployeeReducers\r\n  );\r\n  const { existEmployerProfile } = useSelector(\r\n    (state: ApplicationState) => state.profileEmployerReducers\r\n  );\r\n\r\n  \r\n\r\n  const keyPress = (e: any) => {\r\n    if (e.keyCode == 13) navigation.replace(\"/products\");\r\n  };\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position={\"fixed\"} style={{ backgroundColor: \"#bbbfbc\" }}>\r\n        <Toolbar>\r\n          <Typography className={classes.title} variant=\"h6\" noWrap>\r\n            <Link href={\"/\"} style={{ color: \"black\" }}>\r\n              Dream Jobs\r\n            </Link>\r\n          </Typography>\r\n\r\n          <div className={classes.search}>\r\n            <div className={classes.searchIcon}>\r\n              <Search />\r\n            </div>\r\n            <InputBase\r\n              placeholder=\"Search…\"\r\n              classes={{\r\n                root: classes.inputRoot,\r\n                input: classes.inputInput,\r\n              }}\r\n              inputProps={{ \"aria-label\": \"search\" }}\r\n              // onChange={(e) => onChange(e.target.value)}\r\n              onKeyDown={keyPress}\r\n              // value={search}\r\n            />\r\n          </div>\r\n\r\n          <Link href={\"/\"}>\r\n            <IconButton>\r\n              <Home\r\n                className={\r\n                  pathname === routerEnum.main\r\n                    ? classes.selectedNavIcon\r\n                    : undefined\r\n                }\r\n              />\r\n            </IconButton>\r\n          </Link>\r\n            {/* {\r\n                !existEmployerProfile && <Link href={\"/createHireProfile\"}>\r\n                <IconButton>\r\n                  <AccountCircle\r\n                    className={\r\n                      pathname.includes(routerEnum.hireProfile)\r\n                        ? classes.selectedNavIcon\r\n                        : undefined\r\n                    }\r\n                  />\r\n                </IconButton>\r\n              </Link>\r\n            }\r\n             \r\n            {\r\n                !existEmployeeProfile && <Link href={\"/createJobProfile\"}>\r\n                <IconButton>\r\n                  <AccountCircle\r\n                    className={\r\n                      pathname.includes(routerEnum.jobProfile)\r\n                        ? classes.selectedNavIcon\r\n                        : undefined\r\n                    }\r\n                  />\r\n                </IconButton>\r\n              </Link>\r\n            } */}\r\n\r\n            {\r\n              !existEmployerProfile\r\n              ?\r\n              (\r\n                !existEmployeeProfile\r\n                ?\r\n                <Link href={\"/createHireProfile\"}>\r\n                <IconButton>\r\n                  <AccountCircle\r\n                    className={\r\n                      pathname.includes(routerEnum.hireProfile)\r\n                        ? classes.selectedNavIcon\r\n                        : undefined\r\n                    }\r\n                  />\r\n                </IconButton>\r\n                </Link>\r\n                :\r\n                null\r\n              )\r\n              :\r\n              null\r\n                \r\n              \r\n            }\r\n\r\n            {\r\n              !existEmployeeProfile\r\n              ?\r\n              (\r\n                !existEmployerProfile\r\n                ?\r\n                <Link href={\"/createJobProfile\"}>\r\n                <IconButton>\r\n                  <AccountCircle\r\n                    className={\r\n                      pathname.includes(routerEnum.jobProfile)\r\n                        ? classes.selectedNavIcon\r\n                        : undefined\r\n                    }\r\n                  />\r\n                </IconButton>\r\n                </Link>\r\n                :\r\n                null\r\n              )\r\n              :\r\n              null\r\n            }\r\n        \r\n          \r\n        \r\n           \r\n        \r\n          \r\n\r\n            <MenuListComposition />\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    display: \"none\",\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      display: \"block\",\r\n    },\r\n    color: \"black\",\r\n  },\r\n  search: {\r\n    position: \"relative\",\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: fade(theme.palette.common.white, 0.15),\r\n    \"&:hover\": {\r\n      backgroundColor: fade(theme.palette.common.white, 0.25),\r\n    },\r\n    width: \"100%\",\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      marginLeft: theme.spacing(1),\r\n      width: \"auto\",\r\n    },\r\n    color: \"black\",\r\n  },\r\n  searchIcon: {\r\n    padding: theme.spacing(0, 2),\r\n    height: \"100%\",\r\n    position: \"absolute\",\r\n    pointerEvents: \"none\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  inputRoot: {\r\n    color: \"inherit\",\r\n  },\r\n  inputInput: {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n    transition: theme.transitions.create(\"width\"),\r\n    width: \"100%\",\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: \"12ch\",\r\n      \"&:focus\": {\r\n        width: \"20ch\",\r\n      },\r\n    },\r\n  },\r\n  selectedNavIcon: {\r\n    color: \"#a50101\",\r\n  },\r\n}));\r\n\r\nexport default NavBar;\r\n","C:\\Users\\alexw\\dreamjobs\\src\\reportWebVitals.ts",[],["261","262"],"C:\\Users\\alexw\\dreamjobs\\src\\components\\vacantPosition\\positionItemList.tsx",["263"],"C:\\Users\\alexw\\dreamjobs\\src\\components\\navBar\\menupopper.tsx",["264"],"C:\\Users\\alexw\\dreamjobs\\src\\redux\\reducers\\generalReducers.ts",[],"C:\\Users\\alexw\\dreamjobs\\src\\components\\profile\\employerProfilePositionCard.tsx",["265","266","267","268","269"],"C:\\Users\\alexw\\dreamjobs\\src\\components\\profile\\employerProfilePositionList.tsx",["270"],"C:\\Users\\alexw\\dreamjobs\\src\\redux\\reducers\\index.ts",[],"C:\\Users\\alexw\\dreamjobs\\src\\redux\\actions\\authActions.ts",[],"C:\\Users\\alexw\\dreamjobs\\src\\functions\\createFormData.ts",[],"C:\\Users\\alexw\\dreamjobs\\src\\screens\\profile\\EditProfile.tsx",["271"],"import React,{useEffect, useRef} from 'react';\r\nimport * as yup from 'yup';\r\nimport { Formik } from 'formik';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\nimport { Button, Container, CssBaseline, Grid, makeStyles, TextField, Typography } from '@material-ui/core';\r\nimport { ApplicationState } from '../../redux/reducers';\r\nimport { onGetEmployeeProfileData, onUpdateProfile } from '../../redux/actions/profileEmployeeActions';\r\n\r\n//@ts-ignore\r\nimport { Bounce } from 'react-activity';\r\nimport { DropzoneArea } from 'material-ui-dropzone';\r\n\r\n\r\nconst validationSchema = yup.object().shape({\r\n    lastName: yup.string()\r\n        .label('lastName')\r\n        .required('Please enter last name ')\r\n        .min(3, 'Last Name must be at least 3 characters')\r\n        .max(20,'Last Name must be at most 20 characters'),\r\n    birthDate: yup.date()\r\n        .label('bithDate')\r\n        .required('Please enter your birth date '),\r\n    adress: yup.string()\r\n        .label('adresss')\r\n        .required('Please enter adress ')\r\n        .min(3, 'adress must be at least 3 characters')\r\n        .max(20,'adress must be at most 20 characters'),\r\n    phone: yup.string()\r\n        .label('phone')\r\n        .required('Please enter your phone')\r\n        .min(7,'Phone number must be at least 7 digits')\r\n        .max(20,'Phone number must be at most 20 digits'),\r\n    name: yup.string()\r\n        .label('userName')\r\n        .required('Please enter your Name')\r\n        .min(3,'Name must be at least 3 characters')\r\n        .max(20,'Name must be at most 20 characters'),\r\n    imagePath : yup.array()\r\n        .label('imagePath')\r\n        .max(1,'No more than 1 image'),\r\n})\r\n\r\n\r\n\r\n\r\nconst EditProfile = () => {\r\n    const dispatch = useDispatch();\r\n    const classes = useStyles();\r\n    const navigation = useHistory();\r\n    const formikRef = useRef<any>(null);\r\n\r\n    useEffect(() => {\r\n        dispatch(onGetEmployeeProfileData())\r\n    },[])  \r\n    const {name,email,phone,lastName,birthDate,gender,adress,inProgress,imagePath} = useSelector((state:ApplicationState) => state.profileEmployeeReducers);\r\n    \r\n    const initialFormValue = {\r\n        name,\r\n        phone,\r\n        email,\r\n        lastName,\r\n        gender,\r\n        birthDate,\r\n        adress,\r\n        imagePath\r\n    }\r\n\r\n    const onUpdateInfo = async (values : any) => {\r\n        await dispatch(onUpdateProfile(values));\r\n        navigation.replace('/profile')\r\n    }\r\n    return(\r\n        <Container component=\"div\" maxWidth=\"lg\">\r\n            <Formik innerRef={formikRef}\r\n            initialValues = {initialFormValue}\r\n            validationSchema = {validationSchema}\r\n            onSubmit = {(values) => onUpdateInfo(values)}\r\n            \r\n            >\r\n                {\r\n                    ({values,touched,errors,handleChange,handleBlur,handleSubmit}) => (\r\n\r\n                        <>\r\n                        <CssBaseline/>\r\n                        <div className={classes.paper}>\r\n                            <Typography component='h1' variant='h5'>\r\n                                Edit Profile\r\n                            </Typography>\r\n                            <form className={classes.form} onSubmit={handleSubmit}>\r\n                                <Grid xs={3} sm={4} md={6} lg={12}>\r\n                                    <Grid item xs>\r\n                                    <TextField\r\n                                    variant=\"outlined\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    id=\"name\"\r\n                                    label=\"Your Name\"\r\n                                    name=\"name\"\r\n                                    autoFocus\r\n                                    value={values.name}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    helperText={(errors.name && touched.name) && errors.name}\r\n                                    FormHelperTextProps={{\r\n                                        className : classes.helperText\r\n                                    }}\r\n                                    contentEditable = {false}\r\n                                />\r\n                                    </Grid>\r\n                                <Grid item xs> \r\n                                    <TextField\r\n                                    variant=\"outlined\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    id=\"phone\"\r\n                                    type=\"number\"\r\n                                    label=\"Your phone number\"\r\n                                    name=\"phone\"\r\n                                    autoFocus\r\n                                    value={values.phone}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    helperText={(errors.phone && touched.phone) && errors.phone}\r\n                                    FormHelperTextProps={{\r\n                                        className : classes.helperText\r\n                                    }}\r\n                                /></Grid>\r\n                               \r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    id=\"lastName\"\r\n                                    label=\"Your Last Name\"\r\n                                    name=\"lastName\"\r\n                                    autoFocus\r\n                                    value={values.lastName}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    helperText={(errors.lastName && touched.lastName) && errors.lastName}\r\n                                    FormHelperTextProps={{\r\n                                        className : classes.helperText\r\n                                    }}\r\n                                />\r\n                                <DropzoneArea\r\n                                    acceptedFiles={['image/*']}\r\n                                    filesLimit={1}\r\n                                    dropzoneText={\"Drag and drop your new thumbnail here or click\"}\r\n                                    onChange={(image) => formikRef?.current?.setFieldValue('imagePath',image)}\r\n                                />\r\n                                {(errors.imagePath&&touched.imagePath) && errors.imagePath ?\r\n                                    <p className={classes.helperText} style={{paddingLeft:15,fontSize:12,marginBottom:-15}}>\r\n                                        {(errors.imagePath&&touched.imagePath) && errors.imagePath}\r\n                                    </p>\r\n                                    : null}\r\n                                <Button\r\n                                    type='submit'\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    className={classes.submit}\r\n                                >\r\n                                    <div style={{minHeight:25}}>\r\n                                        {inProgress ?\r\n                                            <div style={{paddingTop:10}}>\r\n                                                <Bounce />\r\n                                            </div>\r\n                                            :\r\n                                            'Edit Profile'\r\n                                        }\r\n                                    </div>\r\n                                </Button>\r\n                                </Grid>\r\n                                \r\n                            </form>\r\n                        </div>\r\n                    </>\r\n                    )\r\n                }\r\n            </Formik>\r\n        </Container>\r\n    )\r\n}\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    helperText : {\r\n        color : '#a20606'\r\n    },\r\n}));\r\n\r\nexport default EditProfile;\r\n",["272","273"],"C:\\Users\\alexw\\dreamjobs\\src\\redux\\store.ts",["274"],"C:\\Users\\alexw\\dreamjobs\\src\\redux\\actions\\positionActions.ts",[],"C:\\Users\\alexw\\dreamjobs\\src\\redux\\reducers\\profileEmployeeReducers.ts",["275"],"import { string } from \"yup/lib/locale\";\r\nimport {EmployeeProfileActions} from \"../actions/profileEmployeeActions\";\r\n\r\ntype EmployeeProfileState = {\r\n    inProgress : boolean,\r\n    id : number | undefined,\r\n    email: string,\r\n    name : string,\r\n    phone : string,\r\n    imagePath : string | undefined,\r\n    lastName : string,\r\n    birthDate : Date | undefined,\r\n    gender : number,\r\n    adress : string,\r\n    languages : any[],\r\n    education : any,\r\n    experience : any,\r\n    skills : any[],\r\n    existEmployeeProfile : boolean\r\n}\r\n\r\nconst initialState = {\r\n    inProgress: false,\r\n    id: undefined,\r\n    email : '',\r\n    name: '',\r\n    phone: '',\r\n    imagePath : undefined,\r\n    lastName : '',\r\n    birthDate : undefined,\r\n    gender : 0,\r\n    adress : '',\r\n    languages : [],\r\n    education : undefined,\r\n    experience : undefined,\r\n    skills : [],\r\n    existEmployeeProfile : false\r\n}\r\n\r\nconst ProfileEmployeeReducer = (state : EmployeeProfileState = initialState,action : EmployeeProfileActions) =>{\r\n    switch (action.type) {\r\n        case \"SET_EMPLOYEE_PROFILE_IN_PROGRESS\":\r\n            return {\r\n                ...state,\r\n                inProgress:action.payload\r\n            }\r\n        case \"GET_EMPLOYEE_PROFILE_DATA\":\r\n            return {\r\n                ...state,\r\n                email:action.payload.email,\r\n                id : action.payload.id,\r\n                name : action.payload.name,\r\n                lastName :action.payload.lastName,\r\n                adress : action.payload.adress,\r\n                phone : action.payload.phone,\r\n                imagePath : action.payload.imagePath,\r\n                birthDate : action.payload.birthDate,\r\n                experience : action.payload.experience,\r\n                education : action.payload.education,\r\n                skills : action.payload.skills,\r\n                languages : action.payload.languages\r\n            }\r\n        case \"SET_EXIST_EMPLOYEE_PROFILE\":\r\n            return{\r\n                ...state,\r\n                existEmployeeProfile: action.payload\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport {ProfileEmployeeReducer}\r\n",["276","277"],"C:\\Users\\alexw\\dreamjobs\\src\\hooks\\useWindowDimenstions.tsx",[],"C:\\Users\\alexw\\dreamjobs\\src\\redux\\actions\\profileEmployerActions.ts",["278","279"],"import {Dispatch} from \"react\";\r\nimport { createUpdateEmployerProfileFormData } from \"../../functions/createFormData\";\r\nimport ApiService from '../../services/api'\r\n\r\n\r\nexport interface getEmployerProfileData{\r\n    readonly type : 'GET_EMPLOYER_PROFILE_DATA',\r\n    payload : {\r\n        profile: any,\r\n        positions: any[]\r\n    }\r\n}\r\n\r\n\r\nexport interface setEmployerProfileInProgress{\r\n    readonly type : 'SET_EMPLOYER_PROFILE_IN_PROGRESS',\r\n    payload: boolean\r\n}\r\n\r\nexport interface setExistEmployerProfile{\r\n    readonly type: 'SET_EXIST_EMPLOYER_PROFILE',\r\n    payload: boolean\r\n}\r\n\r\nexport interface setDeletePositionInProgress{\r\n    readonly type: 'SET_DELETE_POSITION_IN_PROGRESS',\r\n    payload:{\r\n        inProgress:boolean,\r\n        id : number | undefined\r\n    }\r\n}\r\n\r\nexport interface setNewProfilePositions{\r\n    readonly type: 'SET_NEW_PROFILE_POSITIONS',\r\n    payload: number\r\n}\r\n\r\n\r\nexport type EmployerProfileActions =\r\n    |getEmployerProfileData\r\n    |setEmployerProfileInProgress\r\n    |setExistEmployerProfile\r\n    |setDeletePositionInProgress\r\n    |setNewProfilePositions\r\n\r\n\r\n\r\nexport const onGetEmployerProfileData = () =>{\r\n    return async (dispatch : Dispatch<EmployerProfileActions>) => {\r\n        try {\r\n            dispatch({type: 'SET_EMPLOYER_PROFILE_IN_PROGRESS',payload:true});\r\n            const profile = await ApiService.get('profile/employer',{});\r\n            const positions = await ApiService.get('vacantposition/current',{});\r\n            console.log(positions);\r\n            setTimeout(() => dispatch({type: 'GET_EMPLOYER_PROFILE_DATA',payload:{profile: profile.profile,positions: positions.positions}}),1500);\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n        finally{\r\n           setTimeout(() => dispatch({type:'SET_EMPLOYER_PROFILE_IN_PROGRESS',payload: false}),1500) ;\r\n        }\r\n    }\r\n}\r\n\r\nexport const onExistEmployerProfile = () => {\r\n    return async (dispatch : Dispatch<EmployerProfileActions>) => {\r\n        try {\r\n            const response = await ApiService.get('profile/exist',{});\r\n            setTimeout(() => dispatch({type: 'SET_EXIST_EMPLOYER_PROFILE',payload: response.employer}));\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n}\r\n\r\nexport const onUpdateEmployerProfile = (values : any) => {\r\n    return async (dispatch : Dispatch<EmployerProfileActions>) => {\r\n        try {\r\n            dispatch({type:\"SET_EMPLOYER_PROFILE_IN_PROGRESS\",payload: true});\r\n            const formData = createUpdateEmployerProfileFormData(values);\r\n            console.log(values);\r\n            console.log(formData);\r\n            const response = await ApiService.postFormData(\"profile/employer\",formData);\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n        finally{\r\n            setTimeout(() => dispatch({type:\"SET_EMPLOYER_PROFILE_IN_PROGRESS\",payload:false}),1500);\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const onDeletePosition = (id : number) => {\r\n    return async (dispatch : Dispatch<EmployerProfileActions>) => {\r\n        try {\r\n            dispatch({type:\"SET_DELETE_POSITION_IN_PROGRESS\",payload:{inProgress:true,id}});\r\n            const response = await ApiService.delete(`vacantposition/${id}`);\r\n            setTimeout(() => dispatch({type: \"SET_NEW_PROFILE_POSITIONS\",payload:id}),1500);\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n        finally{\r\n            setTimeout(() => dispatch({type: \"SET_DELETE_POSITION_IN_PROGRESS\",payload: {inProgress:false,id: undefined}}),1000);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n",["280","281"],"C:\\Users\\alexw\\dreamjobs\\src\\components\\profile\\EmloyerProfileHeader.tsx",["282","283","284"],"C:\\Users\\alexw\\dreamjobs\\src\\navigation\\Navigation.tsx",["285"],"import React from \"react\";\r\nimport {\r\n    Router,\r\n    Route,\r\n    Redirect, Switch\r\n} from 'react-router'\r\nimport AuthScreen from \"../screens/auth/AuthScreen\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {ApplicationState} from \"../redux/reducers\";\r\nimport Main from \"../screens/main/Main\";\r\nimport NavBar from \"../components/navBar/NavBar\";\r\nimport RegisterScreen from \"../screens/auth/RegisterScreen\";\r\nimport PageNotFound from \"../screens/pageNotFound/PageNotFound\";\r\nimport Footer from \"../components/footer/Footer\";\r\nimport ProfileScreen from \"../screens/profile/ProfileScreen\";\r\nimport CreateEmployerProfile from \"../components/profile/createEmployerProfile\";\r\nimport { PostVacantPositionForm } from \"../components/vacantPosition/positionItemCreate\";\r\nimport MyJobsEmployerProfileScreen from \"../screens/profile/MyJobsEmployerProfile\";\r\nimport PositionDetailsScreen from \"../screens/positions/positionsDetailsScreen\";\r\nimport CreateEmployeeProfile from \"../components/profile/createEmployeeProfile\";\r\nimport CreateEmployeeProfileV2 from \"../components/profile/createEmployeeProfileV2\";\r\n\r\n\r\nconst Navigation = ({history} : any) => {\r\n    const {isLogged} = useSelector((state: ApplicationState) => state.authReducer);\r\n    const {existEmployerProfile} = useSelector((state : ApplicationState) => state.profileEmployerReducers);\r\n    const {existEmployeeProfile} = useSelector((state : ApplicationState) => state.profileEmployeeReducers);\r\n    return (\r\n        <Router history={history}>\r\n            <Switch>\r\n                {!isLogged ?\r\n                    <Switch>\r\n                        <Route exact path={'/'} component={AuthScreen}/>\r\n                        <Route exact path={'/SignIn'} component={AuthScreen}/>\r\n                        <Route exact path={'/SignUp'} component={RegisterScreen}/>\r\n                        <Route path={'/*'} component={() => <Redirect to={'signIn'}/>}/>\r\n                    </Switch>\r\n\r\n                    :\r\n                    <Switch>\r\n                        <Route exact path={'/'} render={() =>(\r\n                            <>\r\n                                <NavBar/>\r\n                                <Route component={Main}/>\r\n                                <Footer/>\r\n                            </>)}\r\n                        />\r\n                        <Route exact path={'/signIn'} render={() =>(\r\n                            !isLogged ?\r\n                                <Route component={AuthScreen} />\r\n                                :\r\n                                <Redirect to={'/'}/>\r\n                        )\r\n                        }/>\r\n                        <Route exact path={'/signUp'} render={()=>(\r\n                            !isLogged ?\r\n                                <Route component={RegisterScreen} />\r\n                                :\r\n                                <Redirect to={'/'}/>\r\n                        )\r\n                        }/>\r\n\r\n                        <Route exact path={\"/profileempy/edit\"} render={() => (\r\n                            <>\r\n                            <NavBar/>\r\n                            <Route component={ProfileScreen}/>\r\n                            <Footer/>\r\n                            </>\r\n                        )}/>\r\n                            \r\n                        <Route exact path={\"/createHireProfile\"} render={() => (\r\n                            existEmployerProfile\r\n                            ?\r\n                            <Redirect to={'/'}/>\r\n                            :\r\n                            <>\r\n                                <NavBar/>\r\n                                <Route component={CreateEmployerProfile}/>\r\n                                <Footer/>\r\n                            </>\r\n                        )}/>\r\n\r\n\r\n                        <Route exact path={\"/addJob\"} render={\r\n                            () => (\r\n                                !existEmployerProfile\r\n                                ?\r\n                                <Redirect to={'/createHireProfile'}/>\r\n                                :\r\n                                <>\r\n                                <NavBar/>\r\n                                <Route component={PostVacantPositionForm}/>\r\n                                <Footer/>\r\n                                </>\r\n                            )\r\n                        }/>\r\n\r\n\r\n                        <Route exact path={\"/myJobs\"} render={\r\n                            () => (\r\n                                !existEmployerProfile\r\n                                ?\r\n                                <Redirect to={'/createHireProfile'}/>\r\n                                :\r\n                                <>\r\n                                <NavBar/>\r\n                                <Route component={MyJobsEmployerProfileScreen}/>\r\n                                <Footer/>\r\n                                </>\r\n                            )\r\n                        }/>\r\n\r\n                        <Route path={\"/positions\"} render={\r\n                            () => (\r\n                                <>\r\n                                    <NavBar/>\r\n                                    <PositionDetailsScreen/>\r\n                                    <Footer/>\r\n                                </>\r\n                            )\r\n                        }/>\r\n\r\n                        <Route exact path={\"/createJobProfile\"} render={()=>(\r\n                            existEmployeeProfile\r\n                            ?\r\n                            <Redirect to={\"/\"}/>\r\n                            :\r\n                            <>\r\n                            {/* <Route component={CreateEmployeeProfile}/> */}\r\n                            <Route component={CreateEmployeeProfileV2}/>\r\n                            </>\r\n                        )}/>\r\n\r\n                        {/* <Route exact path={'creteJobProfile'} render={()=>(\r\n                            existEmployeeProfile\r\n                            ?\r\n                            <Redirect to={'/'}/>\r\n                            :\r\n                            <>\r\n                                <NavBar/>\r\n                                <Route component={CreateEmployeeProfile}/>\r\n                                <Footer/>\r\n                            </>\r\n                        )}/> */}\r\n\r\n                        \r\n\r\n                        \r\n\r\n                        \r\n                        <Route path={'/*'} component={PageNotFound}/>\r\n                    </Switch>\r\n                }\r\n                <Route path={'/*'} component={PageNotFound}/>\r\n            </Switch>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default Navigation\r\n\r\n\r\n","C:\\Users\\alexw\\dreamjobs\\src\\redux\\actions\\generalActions.ts",[],"C:\\Users\\alexw\\dreamjobs\\src\\redux\\reducers\\positionReducer.ts",[],["286","287"],"C:\\Users\\alexw\\dreamjobs\\src\\redux\\reducers\\authReducers.ts",[],"C:\\Users\\alexw\\dreamjobs\\src\\config\\config.ts",[],"C:\\Users\\alexw\\dreamjobs\\src\\components\\vacantPosition\\positionItem.tsx",["288","289","290","291","292","293","294","295","296","297","298","299","300","301"],"C:\\Users\\alexw\\dreamjobs\\src\\screens\\positions\\positionsDetailsScreen.tsx",["302","303","304","305","306","307","308","309","310"],"import { Container, makeStyles, Slide, TextareaAutosize, Theme, Typography } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport Loader from 'react-loader-spinner';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useHistory, useLocation } from 'react-router';\r\nimport Config from '../../config/config';\r\nimport ApiService from '../../services/api';\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport { TransitionProps } from '@material-ui/core/transitions/transition';\r\n\r\nconst Transition = React.forwardRef(function Transition(\r\n    props: TransitionProps & {children?: React.ReactElement},\r\n    ref: React.Ref<unknown>,\r\n){\r\n    return <Slide direction=\"up\" ref={ref} {...props}/>\r\n})\r\n\r\n\r\nexport interface vacantPositionPublicType{\r\n    vacantPositionId : number,\r\n    positionName : string,\r\n    positionDescription : string,\r\n    isRemote : boolean,\r\n    salary : number,\r\n    country : string,\r\n    tags : any[],\r\n    employerProfileImage: any,\r\n    employerId : number\r\n}\r\n\r\nconst PositionDetailsScreen = () => {\r\n    const dispatch = useDispatch();\r\n    const location = useLocation();\r\n    const navigation = useHistory();\r\n    const {pathname} = location;\r\n    const classes = useStyles();\r\n    const [open,setOpen] = useState(false);\r\n\r\n    const [isLoading,setIsLoading] = useState<boolean>(true);\r\n    const [position,setPosition] = useState<vacantPositionPublicType | null>(null);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    }\r\n\r\n    \r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                setIsLoading(true);\r\n                const id = pathname.substring(pathname.lastIndexOf('/') + 1);\r\n                const response = await ApiService.get(`vacantposition/${id}`,{});\r\n                console.log(response);\r\n                setPosition(response.position);\r\n            } catch (e) {\r\n                navigation.replace('/pageNotFound')\r\n            }\r\n            finally{\r\n                setTimeout(() => setIsLoading(false),500);\r\n        }})()\r\n    },[pathname])\r\n\r\n\r\n    return(\r\n        isLoading\r\n        ?\r\n        <div className={classes.center}>\r\n            <Loader type=\"Puff\"/>\r\n        </div>\r\n        :\r\n        <Container maxWidth=\"md\" className={classes.container}>\r\n            <img src={position?.employerProfileImage ? `${Config.sourceUrl}/Images/${position.employerProfileImage}` : require('../../assets/placeholder.svg')} />\r\n            <Typography>\r\n              Name :  {position?.positionName}\r\n            </Typography>\r\n            <Typography>\r\n              Description :  {position?.positionDescription}\r\n            </Typography>\r\n            {\r\n                position?.salary\r\n                ?\r\n                <Typography>\r\n                Salary :  {position?.salary}\r\n                </Typography>\r\n                :\r\n                null\r\n            }\r\n            \r\n            \r\n            <Typography>\r\n              Country :  {position?.country}\r\n            </Typography>\r\n            \r\n        </Container>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles((theme : Theme) => ({\r\n    center: {\r\n        position: 'absolute',\r\n        left: '50%',\r\n        top: '50%',\r\n        transform: 'translate(-50%, -50%)'\r\n    },\r\n    container:{\r\n        marginTop: 100,\r\n        marginBottom: 100\r\n    },\r\n    appbar:{\r\n        position: 'relative',\r\n\r\n    },\r\n    title:{\r\n        marginLeft: theme.spacing(2),\r\n        flex:1\r\n    }\r\n}))\r\n\r\nexport default PositionDetailsScreen;","C:\\Users\\alexw\\dreamjobs\\src\\config\\Colors.ts",[],"C:\\Users\\alexw\\dreamjobs\\src\\components\\profile\\addGeneralInformation.tsx",["311","312","313","314","315","316","317"],"C:\\Users\\alexw\\dreamjobs\\src\\components\\forms\\FormWizard.tsx",["318","319","320","321","322"],"C:\\Users\\alexw\\dreamjobs\\src\\components\\pickers\\datepicker\\DatePickerField.tsx",[],"C:\\Users\\alexw\\dreamjobs\\src\\components\\profile\\createEmployeeProfileV2.tsx",["323","324","325","326","327","328","329","330","331","332","333","334"],"C:\\Users\\alexw\\dreamjobs\\src\\components\\profile\\addEducation.tsx",["335"],"C:\\Users\\alexw\\dreamjobs\\src\\components\\profile\\testWizard.tsx",[],"C:\\Users\\alexw\\dreamjobs\\src\\App.tsx",[],["336","337"],"C:\\Users\\alexw\\dreamjobs\\src\\redux\\actions\\profileEmployeeActions.ts",[],"C:\\Users\\alexw\\dreamjobs\\src\\initialValues\\employeeInitialValues.ts",[],"C:\\Users\\alexw\\dreamjobs\\src\\components\\pickers\\select\\LanguageSelect.tsx",["338","339","340"],"C:\\Users\\alexw\\dreamjobs\\src\\validation\\createEmployeeValidation.ts",["341"],"C:\\Users\\alexw\\dreamjobs\\src\\components\\profile\\addExperience.tsx",[],"C:\\Users\\alexw\\dreamjobs\\src\\services\\api.ts",["342"],"C:\\Users\\alexw\\dreamjobs\\src\\components\\profile\\languageList.tsx",["343","344"],{"ruleId":"345","severity":1,"message":"346","line":1,"column":24,"nodeType":"347","messageId":"348","endLine":1,"endColumn":32},{"ruleId":"349","replacedBy":"350"},{"ruleId":"351","replacedBy":"352"},{"ruleId":"349","replacedBy":"353"},{"ruleId":"351","replacedBy":"354"},{"ruleId":"345","severity":1,"message":"355","line":50,"column":11,"nodeType":"347","messageId":"348","endLine":50,"endColumn":21},{"ruleId":"345","severity":1,"message":"356","line":1,"column":17,"nodeType":"347","messageId":"348","endLine":1,"endColumn":26},{"ruleId":"345","severity":1,"message":"357","line":8,"column":82,"nodeType":"347","messageId":"348","endLine":8,"endColumn":87},{"ruleId":"345","severity":1,"message":"358","line":8,"column":89,"nodeType":"347","messageId":"348","endLine":8,"endColumn":105},{"ruleId":"345","severity":1,"message":"359","line":11,"column":10,"nodeType":"347","messageId":"348","endLine":11,"endColumn":32},{"ruleId":"345","severity":1,"message":"360","line":2,"column":8,"nodeType":"347","messageId":"348","endLine":2,"endColumn":22},{"ruleId":"345","severity":1,"message":"361","line":9,"column":8,"nodeType":"347","messageId":"348","endLine":9,"endColumn":20},{"ruleId":"345","severity":1,"message":"362","line":10,"column":8,"nodeType":"347","messageId":"348","endLine":10,"endColumn":19},{"ruleId":"345","severity":1,"message":"363","line":11,"column":10,"nodeType":"347","messageId":"348","endLine":11,"endColumn":19},{"ruleId":"345","severity":1,"message":"364","line":11,"column":21,"nodeType":"347","messageId":"348","endLine":11,"endColumn":25},{"ruleId":"345","severity":1,"message":"365","line":13,"column":34,"nodeType":"347","messageId":"348","endLine":13,"endColumn":58},{"ruleId":"345","severity":1,"message":"366","line":15,"column":8,"nodeType":"347","messageId":"348","endLine":15,"endColumn":14},{"ruleId":"367","severity":1,"message":"368","line":30,"column":7,"nodeType":"369","endLine":30,"endColumn":9,"suggestions":"370"},{"ruleId":"349","replacedBy":"371"},{"ruleId":"351","replacedBy":"372"},{"ruleId":"373","severity":1,"message":"374","line":39,"column":50,"nodeType":"375","messageId":"376","endLine":39,"endColumn":51,"suggestions":"377"},{"ruleId":"367","severity":1,"message":"368","line":71,"column":7,"nodeType":"369","endLine":71,"endColumn":9,"suggestions":"378"},{"ruleId":"349","replacedBy":"379"},{"ruleId":"351","replacedBy":"380"},{"ruleId":"345","severity":1,"message":"381","line":7,"column":8,"nodeType":"347","messageId":"348","endLine":7,"endColumn":18},{"ruleId":"345","severity":1,"message":"382","line":8,"column":8,"nodeType":"347","messageId":"348","endLine":8,"endColumn":11},{"ruleId":"345","severity":1,"message":"361","line":11,"column":8,"nodeType":"347","messageId":"348","endLine":11,"endColumn":20},{"ruleId":"367","severity":1,"message":"368","line":57,"column":3,"nodeType":"369","endLine":57,"endColumn":5,"suggestions":"383"},{"ruleId":"345","severity":1,"message":"363","line":1,"column":10,"nodeType":"347","messageId":"348","endLine":1,"endColumn":19},{"ruleId":"367","severity":1,"message":"368","line":19,"column":7,"nodeType":"369","endLine":19,"endColumn":9,"suggestions":"384"},{"ruleId":"345","severity":1,"message":"356","line":1,"column":17,"nodeType":"347","messageId":"348","endLine":1,"endColumn":26},{"ruleId":"345","severity":1,"message":"385","line":3,"column":25,"nodeType":"347","messageId":"348","endLine":3,"endColumn":28},{"ruleId":"345","severity":1,"message":"386","line":17,"column":10,"nodeType":"347","messageId":"348","endLine":17,"endColumn":32},{"ruleId":"345","severity":1,"message":"359","line":18,"column":10,"nodeType":"347","messageId":"348","endLine":18,"endColumn":32},{"ruleId":"345","severity":1,"message":"387","line":27,"column":9,"nodeType":"347","messageId":"348","endLine":27,"endColumn":17},{"ruleId":"388","severity":1,"message":"389","line":43,"column":19,"nodeType":"390","messageId":"391","endLine":43,"endColumn":21},{"ruleId":"349","replacedBy":"392"},{"ruleId":"351","replacedBy":"393"},{"ruleId":"345","severity":1,"message":"387","line":10,"column":7,"nodeType":"347","messageId":"348","endLine":10,"endColumn":15},{"ruleId":"345","severity":1,"message":"355","line":30,"column":9,"nodeType":"347","messageId":"348","endLine":30,"endColumn":19},{"ruleId":"345","severity":1,"message":"394","line":3,"column":9,"nodeType":"347","messageId":"348","endLine":3,"endColumn":15},{"ruleId":"345","severity":1,"message":"395","line":3,"column":17,"nodeType":"347","messageId":"348","endLine":3,"endColumn":21},{"ruleId":"345","severity":1,"message":"396","line":3,"column":23,"nodeType":"347","messageId":"348","endLine":3,"endColumn":34},{"ruleId":"345","severity":1,"message":"381","line":3,"column":116,"nodeType":"347","messageId":"348","endLine":3,"endColumn":126},{"ruleId":"345","severity":1,"message":"397","line":16,"column":12,"nodeType":"347","messageId":"348","endLine":16,"endColumn":30},{"ruleId":"345","severity":1,"message":"364","line":1,"column":21,"nodeType":"347","messageId":"348","endLine":1,"endColumn":25},{"ruleId":"367","severity":1,"message":"368","line":55,"column":7,"nodeType":"369","endLine":55,"endColumn":9,"suggestions":"398"},{"ruleId":"349","replacedBy":"399"},{"ruleId":"351","replacedBy":"400"},{"ruleId":"345","severity":1,"message":"401","line":8,"column":9,"nodeType":"347","messageId":"348","endLine":8,"endColumn":22},{"ruleId":"345","severity":1,"message":"402","line":1,"column":10,"nodeType":"347","messageId":"348","endLine":1,"endColumn":16},{"ruleId":"349","replacedBy":"403"},{"ruleId":"351","replacedBy":"404"},{"ruleId":"345","severity":1,"message":"405","line":83,"column":19,"nodeType":"347","messageId":"348","endLine":83,"endColumn":27},{"ruleId":"345","severity":1,"message":"405","line":99,"column":19,"nodeType":"347","messageId":"348","endLine":99,"endColumn":27},{"ruleId":"349","replacedBy":"406"},{"ruleId":"351","replacedBy":"407"},{"ruleId":"345","severity":1,"message":"355","line":12,"column":11,"nodeType":"347","messageId":"348","endLine":12,"endColumn":21},{"ruleId":"345","severity":1,"message":"387","line":15,"column":11,"nodeType":"347","messageId":"348","endLine":15,"endColumn":19},{"ruleId":"408","severity":1,"message":"409","line":24,"column":25,"nodeType":"410","endLine":24,"endColumn":163},{"ruleId":"345","severity":1,"message":"411","line":20,"column":8,"nodeType":"347","messageId":"348","endLine":20,"endColumn":29},{"ruleId":"349","replacedBy":"412"},{"ruleId":"351","replacedBy":"413"},{"ruleId":"345","severity":1,"message":"346","line":1,"column":17,"nodeType":"347","messageId":"348","endLine":1,"endColumn":25},{"ruleId":"345","severity":1,"message":"414","line":6,"column":3,"nodeType":"347","messageId":"348","endLine":6,"endColumn":14},{"ruleId":"345","severity":1,"message":"415","line":8,"column":3,"nodeType":"347","messageId":"348","endLine":8,"endColumn":11},{"ruleId":"345","severity":1,"message":"416","line":10,"column":3,"nodeType":"347","messageId":"348","endLine":10,"endColumn":13},{"ruleId":"345","severity":1,"message":"417","line":11,"column":3,"nodeType":"347","messageId":"348","endLine":11,"endColumn":7},{"ruleId":"345","severity":1,"message":"357","line":13,"column":3,"nodeType":"347","messageId":"348","endLine":13,"endColumn":8},{"ruleId":"345","severity":1,"message":"418","line":16,"column":8,"nodeType":"347","messageId":"348","endLine":16,"endColumn":12},{"ruleId":"345","severity":1,"message":"394","line":19,"column":8,"nodeType":"347","messageId":"348","endLine":19,"endColumn":14},{"ruleId":"345","severity":1,"message":"419","line":21,"column":23,"nodeType":"347","messageId":"348","endLine":21,"endColumn":34},{"ruleId":"345","severity":1,"message":"420","line":22,"column":10,"nodeType":"347","messageId":"348","endLine":22,"endColumn":26},{"ruleId":"345","severity":1,"message":"421","line":23,"column":10,"nodeType":"347","messageId":"348","endLine":23,"endColumn":15},{"ruleId":"345","severity":1,"message":"422","line":24,"column":8,"nodeType":"347","messageId":"348","endLine":24,"endColumn":14},{"ruleId":"345","severity":1,"message":"423","line":37,"column":9,"nodeType":"347","messageId":"348","endLine":37,"endColumn":14},{"ruleId":"345","severity":1,"message":"387","line":39,"column":9,"nodeType":"347","messageId":"348","endLine":39,"endColumn":17},{"ruleId":"345","severity":1,"message":"358","line":1,"column":40,"nodeType":"347","messageId":"348","endLine":1,"endColumn":56},{"ruleId":"345","severity":1,"message":"424","line":8,"column":8,"nodeType":"347","messageId":"348","endLine":8,"endColumn":14},{"ruleId":"345","severity":1,"message":"425","line":11,"column":7,"nodeType":"347","messageId":"348","endLine":11,"endColumn":17},{"ruleId":"345","severity":1,"message":"387","line":32,"column":11,"nodeType":"347","messageId":"348","endLine":32,"endColumn":19},{"ruleId":"345","severity":1,"message":"426","line":37,"column":12,"nodeType":"347","messageId":"348","endLine":37,"endColumn":16},{"ruleId":"345","severity":1,"message":"427","line":42,"column":11,"nodeType":"347","messageId":"348","endLine":42,"endColumn":26},{"ruleId":"345","severity":1,"message":"428","line":46,"column":11,"nodeType":"347","messageId":"348","endLine":46,"endColumn":22},{"ruleId":"367","severity":1,"message":"429","line":65,"column":7,"nodeType":"369","endLine":65,"endColumn":17,"suggestions":"430"},{"ruleId":"408","severity":1,"message":"409","line":76,"column":13,"nodeType":"410","endLine":76,"endColumn":163},{"ruleId":"345","severity":1,"message":"394","line":1,"column":10,"nodeType":"347","messageId":"348","endLine":1,"endColumn":16},{"ruleId":"345","severity":1,"message":"431","line":1,"column":31,"nodeType":"347","messageId":"348","endLine":1,"endColumn":47},{"ruleId":"345","severity":1,"message":"432","line":2,"column":10,"nodeType":"347","messageId":"348","endLine":2,"endColumn":16},{"ruleId":"345","severity":1,"message":"433","line":2,"column":18,"nodeType":"347","messageId":"348","endLine":2,"endColumn":26},{"ruleId":"345","severity":1,"message":"346","line":4,"column":17,"nodeType":"347","messageId":"348","endLine":4,"endColumn":25},{"ruleId":"345","severity":1,"message":"434","line":5,"column":10,"nodeType":"347","messageId":"348","endLine":5,"endColumn":21},{"ruleId":"345","severity":1,"message":"435","line":6,"column":13,"nodeType":"347","messageId":"348","endLine":6,"endColumn":16},{"ruleId":"345","severity":1,"message":"436","line":10,"column":17,"nodeType":"347","messageId":"348","endLine":10,"endColumn":27},{"ruleId":"345","severity":1,"message":"437","line":10,"column":29,"nodeType":"347","messageId":"348","endLine":10,"endColumn":41},{"ruleId":"345","severity":1,"message":"438","line":10,"column":43,"nodeType":"347","messageId":"348","endLine":10,"endColumn":57},{"ruleId":"345","severity":1,"message":"439","line":10,"column":59,"nodeType":"347","messageId":"348","endLine":10,"endColumn":73},{"ruleId":"345","severity":1,"message":"440","line":11,"column":10,"nodeType":"347","messageId":"348","endLine":11,"endColumn":31},{"ruleId":"345","severity":1,"message":"441","line":2,"column":8,"nodeType":"347","messageId":"348","endLine":2,"endColumn":20},{"ruleId":"345","severity":1,"message":"346","line":3,"column":28,"nodeType":"347","messageId":"348","endLine":3,"endColumn":36},{"ruleId":"345","severity":1,"message":"394","line":5,"column":3,"nodeType":"347","messageId":"348","endLine":5,"endColumn":9},{"ruleId":"345","severity":1,"message":"442","line":6,"column":3,"nodeType":"347","messageId":"348","endLine":6,"endColumn":19},{"ruleId":"345","severity":1,"message":"443","line":8,"column":3,"nodeType":"347","messageId":"348","endLine":8,"endColumn":7},{"ruleId":"345","severity":1,"message":"444","line":9,"column":3,"nodeType":"347","messageId":"348","endLine":9,"endColumn":12},{"ruleId":"345","severity":1,"message":"445","line":10,"column":3,"nodeType":"347","messageId":"348","endLine":10,"endColumn":10},{"ruleId":"345","severity":1,"message":"381","line":11,"column":3,"nodeType":"347","messageId":"348","endLine":11,"endColumn":13},{"ruleId":"345","severity":1,"message":"446","line":13,"column":10,"nodeType":"347","messageId":"348","endLine":13,"endColumn":14},{"ruleId":"345","severity":1,"message":"432","line":13,"column":16,"nodeType":"347","messageId":"348","endLine":13,"endColumn":22},{"ruleId":"345","severity":1,"message":"447","line":20,"column":10,"nodeType":"347","messageId":"348","endLine":20,"endColumn":31},{"ruleId":"367","severity":1,"message":"368","line":43,"column":7,"nodeType":"369","endLine":43,"endColumn":9,"suggestions":"448"},{"ruleId":"345","severity":1,"message":"433","line":2,"column":10,"nodeType":"347","messageId":"348","endLine":2,"endColumn":18},{"ruleId":"349","replacedBy":"449"},{"ruleId":"351","replacedBy":"450"},{"ruleId":"345","severity":1,"message":"364","line":1,"column":44,"nodeType":"347","messageId":"348","endLine":1,"endColumn":48},{"ruleId":"345","severity":1,"message":"416","line":1,"column":50,"nodeType":"347","messageId":"348","endLine":1,"endColumn":60},{"ruleId":"345","severity":1,"message":"451","line":1,"column":62,"nodeType":"347","messageId":"348","endLine":1,"endColumn":72},{"ruleId":"452","severity":1,"message":"453","line":5,"column":1,"nodeType":"454","endLine":67,"endColumn":2},{"ruleId":"452","severity":1,"message":"455","line":33,"column":1,"nodeType":"454","endLine":74,"endColumn":2},{"ruleId":"345","severity":1,"message":"456","line":1,"column":10,"nodeType":"347","messageId":"348","endLine":1,"endColumn":14},{"ruleId":"345","severity":1,"message":"457","line":3,"column":10,"nodeType":"347","messageId":"348","endLine":3,"endColumn":24},"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","no-native-reassign",["458"],"no-negated-in-lhs",["459"],["458"],["459"],"'navigation' is assigned a value but never used.","'useEffect' is defined but never used.","'Paper' is defined but never used.","'TextareaAutosize' is defined but never used.","'onExistEmployerProfile' is defined but never used.","'InfiniteScroll' is defined but never used.","'PositionItem' is defined but never used.","'EditProfile' is defined but never used.","'Container' is defined but never used.","'Grid' is defined but never used.","'onGetEmployerProfileData' is defined but never used.","'Config' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["460"],["458"],["459"],"no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["461","462"],["463"],["458"],["459"],"'Typography' is defined but never used.","'Box' is defined but never used.",["464"],["465"],"'Add' is defined but never used.","'onExistEmployeeProfile' is defined but never used.","'dispatch' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["458"],["459"],"'Button' is defined but never used.","'Card' is defined but never used.","'CardContent' is defined but never used.","'inProgressDeleting' is assigned a value but never used.",["466"],["458"],["459"],"'createMigrate' is defined but never used.","'string' is defined but never used.",["458"],["459"],"'response' is assigned a value but never used.",["458"],["459"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'CreateEmployeeProfile' is defined but never used.",["458"],["459"],"'CardActions' is defined but never used.","'Collapse' is defined but never used.","'IconButton' is defined but never used.","'Link' is defined but never used.","'clsx' is defined but never used.","'useSelector' is defined but never used.","'ApplicationState' is defined but never used.","'Color' is defined but never used.","'Loader' is defined but never used.","'theme' is assigned a value but never used.","'Dialog' is defined but never used.","'Transition' is assigned a value but never used.","'open' is assigned a value but never used.","'handleClickOpen' is assigned a value but never used.","'handleClose' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'navigation'. Either include it or remove the dependency array.",["467"],"'FormControlLabel' is defined but never used.","'Formik' is defined but never used.","'useField' is defined but never used.","'useDispatch' is defined but never used.","'yup' is defined but never used.","'ReactChild' is defined but never used.","'ReactElement' is defined but never used.","'ReactNodeArray' is defined but never used.","'ReactPropTypes' is defined but never used.","'EmployeeProfileCreate' is defined but never used.","'PageNotFound' is defined but never used.","'CircularProgress' is defined but never used.","'Step' is defined but never used.","'StepLabel' is defined but never used.","'Stepper' is defined but never used.","'Form' is defined but never used.","'AddGeneralInformation' is defined but never used.",["468"],["458"],["459"],"'InputLabel' is defined but never used.","import/no-anonymous-default-export","Assign array to a variable before exporting as module default","ExportDefaultDeclaration","Assign object to a variable before exporting as module default","'List' is defined but never used.","'LanguageSelect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"469","fix":"470"},{"messageId":"471","fix":"472","desc":"473"},{"messageId":"474","fix":"475","desc":"476"},{"desc":"469","fix":"477"},{"desc":"469","fix":"478"},{"desc":"469","fix":"479"},{"desc":"469","fix":"480"},{"desc":"481","fix":"482"},{"desc":"469","fix":"483"},"Update the dependencies array to be: [dispatch]",{"range":"484","text":"485"},"removeEscape",{"range":"486","text":"487"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"488","text":"489"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"490","text":"485"},{"range":"491","text":"485"},{"range":"492","text":"485"},{"range":"493","text":"485"},"Update the dependencies array to be: [navigation, pathname]",{"range":"494","text":"495"},{"range":"496","text":"485"},[1355,1357],"[dispatch]",[1523,1524],"",[1523,1523],"\\",[2695,2697],[1594,1596],[875,877],[1979,1981],[2139,2149],"[navigation, pathname]",[1518,1520]]